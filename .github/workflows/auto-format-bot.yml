name: "Format Bot"

on:
  issue_comment:
    types: [created]

env:
  DEVELOCITY_ACCESS_KEY: ${{ secrets.DEVELOCITY_ACCESS_KEY }}

jobs:
  format-fix:
    name: Apply formatting fixes
    # Only run on pull request comments and when the comment contains the trigger phrase
    if: |
      github.event.issue.pull_request &&
      (contains(github.event.comment.body, '@lucene-format-bot apply') ||
      contains(github.event.comment.body, '/format-fix'))

    runs-on: ubuntu-latest
    timeout-minutes: 30

    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
      - name: Get PR details
        id: pr_details
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            return {
              head_ref: pr.head.ref,
              head_sha: pr.head.sha,
              base_ref: pr.base.ref,
              repo_full_name: pr.head.repo.full_name,
              repo_clone_url: pr.head.repo.clone_url
            };

      - name: React to comment
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: 'eyes'
            });

      - name: Correct git autocrlf
        run: git config --global core.autocrlf false

      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ fromJson(steps.pr_details.outputs.result).repo_full_name }}
          ref: ${{ fromJson(steps.pr_details.outputs.result).head_ref }}
          fetch-depth: 0

      - uses: ./.github/actions/prepare-for-build

      - name: Install editorconfig-checker
        run: |
          npm install -g editorconfig-checker
          echo "Installed editorconfig-checker version: $(editorconfig-checker --version)"

      - name: Install ast-grep
        run: |
          npm -g i @ast-grep/cli
          echo "lucene.tool.ast-grep=ast-grep" >> build-options.local.properties

      - name: Check formatting before fixes
        id: check_before
        run: |
          echo "Checking current formatting status..."
          set +e
          ./gradlew check -x test "-Ptask.times=true" --max-workers 2
          exit_code=$?
          echo "initial_check_passed=$([[ $exit_code -eq 0 ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          exit 0

      - name: Apply formatting fixes
        if: steps.check_before.outputs.initial_check_passed == 'false'
        run: |
          echo "Applying formatting fixes..."
          echo "→ Applying EditorConfig fixes..."
          ./gradlew applyEcLint "-Ptask.times=true" --max-workers 2
          echo "→ Applying code formatting..."
          ./gradlew tidy "-Ptask.times=true" --max-workers 2

          echo "Applying EditorConfig fixes..."

          # Get list of changed files (exclude deleted files and binary files)
          echo "Getting list of changed files..."
          changed_files=$(git diff --name-only --diff-filter=AM ${{ fromJson(steps.pr_details.outputs.result).base_ref }}...HEAD | grep -E '\.(java|gradle|groovy|yml|yaml|md|txt|properties|sh|bat|cmd)$' || true)

          if [ -z "$changed_files" ]; then
            echo "No relevant files changed for EditorConfig processing"
            exit 0
          fi

          echo "Files to process:"
          echo "$changed_files"

          # Check current EditorConfig compliance for changed files only
          echo "Checking EditorConfig compliance for changed files..."
          if [ -n "$changed_files" ]; then
            echo "$changed_files" | xargs editorconfig-checker 2>&1 || echo "EditorConfig issues found in changed files"
          fi

          echo "Applying comprehensive EditorConfig fixes to changed files..."

          # 1. Fix trailing whitespace in changed files
          echo "→ Removing trailing whitespace from changed files..."
          if [ -n "$changed_files" ]; then
            echo "$changed_files" | xargs -I {} sh -c 'sed -i "s/[[:space:]]*$//" "$1"' _ {}
          fi

          # 2. Fix line endings for Windows files (convert LF to CRLF for .bat/.cmd files)
          echo "→ Fixing line endings for Windows files..."
          windows_files=$(echo "$changed_files" | grep -E '\.(bat|cmd)$' || true)
          if [ -n "$windows_files" ]; then
            echo "$windows_files" | while read -r file; do
              if [ -f "$file" ] && ! file "$file" | grep -q "CRLF"; then
                echo "  Converting LF to CRLF for: $file"
                sed -i 's/$/\r/' "$file"
              fi
            done
          fi

          # 3. Fix indentation issues (convert tabs to spaces where needed)
          echo "→ Converting tabs to spaces for text files..."
          if [ -n "$changed_files" ]; then
            echo "$changed_files" | xargs -I {} sh -c 'sed -i "s/\t/  /g" "$1"' _ {}
          fi

          # 4. Ensure files end with newline
          echo "→ Ensuring files end with newline..."
          if [ -n "$changed_files" ]; then
            echo "$changed_files" | while read -r file; do
              if [ -f "$file" ] && file "$file" | grep -q "text"; then
                if [ -s "$file" ] && [ "$(tail -c1 "$file" | wc -l)" -eq 0 ]; then
                  echo "  Adding final newline to: $file"
                  echo "" >> "$file"
                fi
              fi
            done
          fi

          echo "✅ EditorConfig fixes completed for changed files"

      - name: Check if any files were changed
        id: git_changes
        if: steps.check_before.outputs.initial_check_passed == 'false'
        run: |
          if git diff --quiet; then
            echo "No changes were made by formatting fixes"
            echo "changes_made=false" >> $GITHUB_OUTPUT
          else
            echo "Changes were made by formatting fixes"
            echo "changes_made=true" >> $GITHUB_OUTPUT
            echo "Changed files:"
            git diff --name-only
          fi

      - name: Verify formatting fixes
        id: check_after
        if: steps.check_before.outputs.initial_check_passed == 'false' && steps.git_changes.outputs.changes_made == 'true'
        run: |
          echo "Verifying formatting fixes..."

          # Get list of changed files again (in case the list is different)
          changed_files=$(git diff --name-only --diff-filter=AM ${{ fromJson(steps.pr_details.outputs.result).base_ref }}...HEAD | grep -E '\.(java|gradle|groovy|yml|yaml|md|txt|properties|sh|bat|cmd)$' || true)

          # Check EditorConfig compliance after fixes for changed files only
          echo "Checking EditorConfig compliance after fixes for changed files..."
          set +e
          editorconfig_exit_code=0
          if [ -n "$changed_files" ]; then
            editorconfig_check_result=$(echo "$changed_files" | xargs editorconfig-checker 2>&1)
            editorconfig_exit_code=$?
          else
            editorconfig_check_result="No changed files to check"
          fi

          # Check Gradle formatting compliance (code formatting, not EditorConfig)
          echo "Checking code formatting compliance..."
          ./gradlew check -x test "-Ptask.times=true" --max-workers 2
          gradle_exit_code=$?

          # Overall success requires both to pass
          if [[ $editorconfig_exit_code -eq 0 && $gradle_exit_code -eq 0 ]]; then
            echo "✅ All formatting validation passed after fixes"
            echo "final_check_passed=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Some formatting validation still failing after fixes"
            if [[ $editorconfig_exit_code -ne 0 ]]; then
              echo "EditorConfig issues found in changed files:"
              echo "$editorconfig_check_result"
            fi
            if [[ $gradle_exit_code -ne 0 ]]; then
              echo "Gradle formatting checks failed"
            fi
            echo "final_check_passed=false" >> $GITHUB_OUTPUT
          fi
          exit 0

      - name: Create fix branch and commit
        id: create_fix_branch
        if: |
          steps.check_before.outputs.initial_check_passed == 'false' &&
          steps.git_changes.outputs.changes_made == 'true' &&
          steps.check_after.outputs.final_check_passed == 'true'
        run: |
          # Create a new branch for the fixes
          fix_branch="format-fixes-${{ fromJson(steps.pr_details.outputs.result).head_ref }}-$(date +%s)"
          echo "fix_branch=$fix_branch" >> $GITHUB_OUTPUT

          git config --local user.email "action@github.com"
          git config --local user.name "Lucene Format Bot"

          git checkout -b "$fix_branch"
          git add -A
          git commit -m "Apply automatic formatting fixes

          Fixes applied by @lucene-format-bot in response to:
          ${{ github.event.comment.html_url }}

          Original PR: #${{ github.event.issue.number }}

          Changes:
          $(git diff --name-only HEAD~1)"

      - name: Push fix branch
        if: |
          steps.check_before.outputs.initial_check_passed == 'false' &&
          steps.git_changes.outputs.changes_made == 'true' &&
          steps.check_after.outputs.final_check_passed == 'true'
        run: |
          git push origin ${{ steps.create_fix_branch.outputs.fix_branch }}

      - name: Create PR for fixes
        id: create_pr
        if: |
          steps.check_before.outputs.initial_check_passed == 'false' &&
          steps.git_changes.outputs.changes_made == 'true' &&
          steps.check_after.outputs.final_check_passed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: fixPr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🤖 Apply formatting fixes to #${{ github.event.issue.number }}`,
              head: '${{ steps.create_fix_branch.outputs.fix_branch }}',
              base: '${{ fromJson(steps.pr_details.outputs.result).head_ref }}',
              body: `## Automatic Formatting Fixes

            This PR applies automatic formatting fixes to address validation failures in #${{ github.event.issue.number }}.

            ### 🔧 Changes Applied
            - ✅ EditorConfig fixes via \`./gradlew applyEcLint\`
            - ✅ Code formatting via \`./gradlew tidy\`
            - ✅ Java code formatted with google-java-format
            - ✅ Gradle/Groovy scripts formatted with spotless
            - ✅ Trailing whitespace, tabs, and line endings fixed
            - ✅ EditorConfig compliance via \`editorconfig-checker\`
            - ✅ Trailing whitespace removal
            - ✅ Line ending fixes (CRLF for Windows files)
            - ✅ Tab-to-space conversion
            - ✅ Final newline insertion
            - ✅ All formatting validation checks now pass

            ### 📝 Details
            - **Triggered by**: ${{ github.event.comment.html_url }}
            - **Original PR**: #${{ github.event.issue.number }}
            - **Fix branch**: \`${{ steps.create_fix_branch.outputs.fix_branch }}\`

            ### 🚀 Next Steps
            Review and merge this PR to apply the formatting fixes to the original branch.

            ---
            *This PR was created automatically by the Lucene Format Bot 🤖*`
            });

            return {
              number: fixPr.number,
              html_url: fixPr.html_url
            };

      - name: Comment on original PR with success
        if: |
          steps.check_before.outputs.initial_check_passed == 'false' &&
          steps.git_changes.outputs.changes_made == 'true' &&
          steps.check_after.outputs.final_check_passed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fixPr = ${{ steps.create_pr.outputs.result }};
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `🤖 **Format Bot Results**

            ✅ **Formatting fixes applied successfully!**

            New PR with the formatting fixes: **#${fixPr.number}**

            ---
            *To trigger the format bot again, comment \`@lucene-format-bot apply\` or \`/format-fix\`*`
            });

      - name: Comment on original PR with no changes needed
        if: steps.check_before.outputs.initial_check_passed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `🤖 **Format Bot Results**

            ✅ **No formatting issues found!**

            Your code already complies with the project's formatting standards. No changes are needed.

            ---
            *To trigger the format bot again, comment \`@lucene-format-bot apply\` or \`/format-fix\`*`
            });

      - name: Comment on original PR with no changes made
        if: |
          steps.check_before.outputs.initial_check_passed == 'false' &&
          steps.git_changes.outputs.changes_made == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `🤖 **Format Bot Results**

            ⚠️ **Formatting issues detected, but no automatic fixes available**

            The formatting validation failed, but running \`./gradlew tidy\` did not produce any changes. This might indicate:
            - Issues that cannot be automatically fixed
            - Problems with the build configuration
            - Non-formatting validation failures

            **Recommendation:** Please review the validation failures manually and apply fixes as needed.

            ---
            *To trigger the format bot again, comment \`@lucene-format-bot apply\` or \`/format-fix\`*`
            });

      - name: Comment on original PR with fix failures
        if: |
          steps.check_before.outputs.initial_check_passed == 'false' &&
          steps.git_changes.outputs.changes_made == 'true' &&
          steps.check_after.outputs.final_check_passed == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `🤖 **Format Bot Results**

            ❌ **Formatting fixes applied, but validation still failing**

            Formatting fixes were applied using \`./gradlew tidy\`, but the validation checks are still failing. This suggests there may be:
            - Additional formatting issues that cannot be automatically fixed
            - Non-formatting validation problems
            - Build or configuration issues

            **Recommendation:** Please review the validation failures manually and apply additional fixes as needed.

            ---
            *To trigger the format bot again, comment \`@lucene-format-bot apply\` or \`/format-fix\`*`
            });

      - name: Update reaction on completion
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            // Remove the eyes reaction and add thumbs up
            try {
              await github.rest.reactions.createForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: context.payload.comment.id,
                content: 'hooray'
              });
            } catch (error) {
              console.log('Could not add reaction:', error.message);
            }
