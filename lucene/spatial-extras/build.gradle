/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java-library'

description = 'Geospatial search using Spatial4j'

java {
  registerFeature('spherical') { // i.e. that which is provided by spatial3d module
    usingSourceSet(sourceSets.main)
  }
  registerFeature('jts') {
    usingSourceSet(sourceSets.main)
  }
}

dependencies {
  api project(':lucene:core')
  api 'org.locationtech.spatial4j:spatial4j'

  // for surface-of-sphere (or ellipsoid) geometry
  sphericalImplementation project(':lucene:spatial3d') // AKA Geo3d
  // for S2PrefixTree which is a great choice with spatial3d
  sphericalImplementation 'io.sgr:s2-geometry-library-java'

  // for JtsSpatialContextFactory in Spatial4j.  Jts is well-known; has polygon support.
  jtsImplementation 'org.locationtech.jts:jts-core'

  testImplementation project(':lucene:test-framework')
  testImplementation testFixtures(project(':lucene:spatial3d'))

  testImplementation 'org.locationtech.spatial4j:spatial4j::tests'
}
