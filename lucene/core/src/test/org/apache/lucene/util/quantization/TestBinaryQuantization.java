/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.lucene.util.quantization;

import java.util.Arrays;
import org.apache.lucene.index.VectorSimilarityFunction;
import org.apache.lucene.tests.util.LuceneTestCase;
import org.apache.lucene.util.VectorUtil;

public class TestBinaryQuantization extends LuceneTestCase {

  public void testQuantizeForIndex() {
    int dimensions = random().nextInt(1, 4097);
    int discretizedDimensions = BQVectorUtils.discretize(dimensions, 64);

    int randIdx = random().nextInt(VectorSimilarityFunction.values().length);
    VectorSimilarityFunction similarityFunction = VectorSimilarityFunction.values()[randIdx];

    BinaryQuantizer quantizer = new BinaryQuantizer(discretizedDimensions, similarityFunction);

    float[] centroid = new float[dimensions];
    for (int i = 0; i < dimensions; i++) {
      centroid[i] = random().nextFloat(-50f, 50f);
    }

    float[] vector = new float[dimensions];
    for (int i = 0; i < dimensions; i++) {
      vector[i] = random().nextFloat(-50f, 50f);
    }

    byte[] destination = new byte[discretizedDimensions / 8];
    float[] corrections = quantizer.quantizeForIndex(vector, destination, centroid);

    for (float correction : corrections) {
      assertFalse(Float.isNaN(correction));
    }

    if (similarityFunction == VectorSimilarityFunction.MAXIMUM_INNER_PRODUCT) {
      assertEquals(3, corrections.length);
      assertTrue(corrections[0] >= 0);
      assertTrue(corrections[1] > 0);
    } else {
      assertEquals(2, corrections.length);
      assertTrue(corrections[0] > 0);
      assertTrue(corrections[1] > 0);
    }
  }

  public void testQuantizeForQuery() {
      int dimensions = random().nextInt(1, 4097);
      int discretizedDimensions = BQVectorUtils.discretize(dimensions, 64);

      int randIdx = random().nextInt(VectorSimilarityFunction.values().length);
      VectorSimilarityFunction similarityFunction = VectorSimilarityFunction.values()[randIdx];

      BinaryQuantizer quantizer = new BinaryQuantizer(discretizedDimensions, similarityFunction);

      float[] centroid = new float[dimensions];
      for (int i = 0; i < dimensions; i++) {
          centroid[i] = random().nextFloat(-50f, 50f);
      }

      float[] vector = new float[dimensions];
      for (int i = 0; i < dimensions; i++) {
          vector[i] = random().nextFloat(-50f, 50f);
      }

      byte[] destination = new byte[discretizedDimensions / 8 * BQSpaceUtils.B_QUERY];
      float cDotC = 0;
      BinaryQuantizer.QueryFactors corrections =
              quantizer.quantizeForQuery(vector, destination, centroid, cDotC);

      if (similarityFunction == VectorSimilarityFunction.MAXIMUM_INNER_PRODUCT) {
          int sumQ = corrections.quantizedSum();
          float distToC = corrections.distToC();
          float lower = corrections.lower();
          float width = corrections.width();
          float normVmC = corrections.normVmC();
          float vDotC = corrections.vDotC();
          cDotC = corrections.cDotC();
          assertTrue(sumQ >= 0);
          assertTrue(distToC >= 0);
          assertFalse(Float.isNaN(lower));
          assertTrue(width >= 0);
          assertTrue(normVmC >= 0);
          assertFalse(Float.isNaN(vDotC));
          assertTrue(cDotC >= 0);
      } else {
          int sumQ = corrections.quantizedSum();
          float distToC = corrections.distToC();
          float lower = corrections.lower();
          float width = corrections.width();
          assertTrue(sumQ >= 0);
          assertTrue(distToC >= 0);
          assertFalse(Float.isNaN(lower));
          assertTrue(width >= 0);
          assertEquals(corrections.normVmC(), 0.0f, 0.01f);
          assertEquals(corrections.vDotC(), 0.0f, 0.01f);
          assertEquals(corrections.cDotC(), 0.0f, 0.01f);
      }
  }

  public void testQuantizeForIndexEuclidean() {
    int dimensions = 128;

    BinaryQuantizer quantizer = new BinaryQuantizer(dimensions, VectorSimilarityFunction.EUCLIDEAN);
    float[] vector =
        new float[] {
          0f, 0.0f, 16.0f, 35.0f, 5.0f, 32.0f, 31.0f, 14.0f, 10.0f, 11.0f, 78.0f, 55.0f, 10.0f,
          45.0f, 83.0f, 11.0f, 6.0f, 14.0f, 57.0f, 102.0f, 75.0f, 20.0f, 8.0f, 3.0f, 5.0f, 67.0f,
          17.0f, 19.0f, 26.0f, 5.0f, 0.0f, 1.0f, 22.0f, 60.0f, 26.0f, 7.0f, 1.0f, 18.0f, 22.0f,
          84.0f, 53.0f, 85.0f, 119.0f, 119.0f, 4.0f, 24.0f, 18.0f, 7.0f, 7.0f, 1.0f, 81.0f, 106.0f,
          102.0f, 72.0f, 30.0f, 6.0f, 0.0f, 9.0f, 1.0f, 9.0f, 119.0f, 72.0f, 1.0f, 4.0f, 33.0f,
          119.0f, 29.0f, 6.0f, 1.0f, 0.0f, 1.0f, 14.0f, 52.0f, 119.0f, 30.0f, 3.0f, 0.0f, 0.0f,
          55.0f, 92.0f, 111.0f, 2.0f, 5.0f, 4.0f, 9.0f, 22.0f, 89.0f, 96.0f, 14.0f, 1.0f, 0.0f,
          1.0f, 82.0f, 59.0f, 16.0f, 20.0f, 5.0f, 25.0f, 14.0f, 11.0f, 4.0f, 0.0f, 0.0f, 1.0f,
          26.0f, 47.0f, 23.0f, 4.0f, 0.0f, 0.0f, 4.0f, 38.0f, 83.0f, 30.0f, 14.0f, 9.0f, 4.0f, 9.0f,
          17.0f, 23.0f, 41.0f, 0.0f, 0.0f, 2.0f, 8.0f, 19.0f, 25.0f, 23.0f
        };
    byte[] destination = new byte[dimensions / 8];
    float[] centroid =
        new float[] {
          27.054054f, 22.252253f, 25.027027f, 23.55856f, 31.099098f, 28.765766f, 31.64865f,
          30.981981f, 24.675676f, 21.81982f, 26.72973f, 25.486486f, 30.504505f, 35.216217f,
          28.306307f, 24.486486f, 29.675676f, 26.153152f, 31.315315f, 25.225225f, 29.234234f,
          30.855856f, 24.495495f, 29.828829f, 31.54955f, 24.36937f, 25.108109f, 24.873875f,
          22.918919f, 24.918919f, 29.027027f, 25.513514f, 27.64865f, 28.405405f, 23.603603f,
          17.900902f, 22.522522f, 24.855856f, 31.396397f, 32.585587f, 26.297297f, 27.468468f,
          19.675676f, 19.018019f, 24.801802f, 30.27928f, 27.945946f, 25.324324f, 29.918919f,
          27.864864f, 28.081081f, 23.45946f, 28.828829f, 28.387388f, 25.387388f, 27.90991f,
          25.621622f, 21.585585f, 26.378378f, 24.144144f, 21.666666f, 22.72973f, 26.837837f,
          22.747747f, 29.0f, 28.414415f, 24.612612f, 21.594595f, 19.117117f, 24.045046f,
          30.612612f, 27.55856f, 25.117117f, 27.783783f, 21.639639f, 19.36937f, 21.252253f,
          29.153152f, 29.216217f, 24.747747f, 28.252253f, 25.288288f, 25.738739f, 23.44144f,
          24.423424f, 23.693693f, 26.306307f, 29.162163f, 28.684685f, 34.648647f, 25.576576f,
          25.288288f, 29.63063f, 20.225225f, 25.72973f, 29.009008f, 28.666666f, 29.243244f,
          26.36937f, 25.864864f, 21.522522f, 21.414415f, 25.963964f, 26.054054f, 25.099098f,
          30.477478f, 29.55856f, 24.837837f, 24.801802f, 21.18018f, 24.027027f, 26.360361f,
          33.153152f, 29.135136f, 30.486486f, 28.639639f, 27.576576f, 24.486486f, 26.297297f,
          21.774775f, 25.936937f, 35.36937f, 25.171171f, 30.405405f, 31.522522f, 29.765766f,
          22.324324f, 26.09009f
        };
    float[] corrections = quantizer.quantizeForIndex(vector, destination, centroid);

    assertEquals(2, corrections.length);
    float distToCentroid = corrections[0];
    float magnitude = corrections[1];

    assertEquals(387.90204f, distToCentroid, 0.0003f);
    assertEquals(0.75916624f, magnitude, 0.0000001f);
    assertArrayEquals(
        new byte[] {20, 54, 56, 72, 97, -16, 62, 12, -32, -29, -125, 12, 0, -63, -63, -126},
        destination);
  }

  public void testQuantizeForQueryEuclidean() {
    int dimensions = 128;

    BinaryQuantizer quantizer = new BinaryQuantizer(dimensions, VectorSimilarityFunction.EUCLIDEAN);
    float[] vector =
        new float[] {
          0.0f, 8.0f, 69.0f, 45.0f, 2.0f, 0f, 16.0f, 52.0f, 32.0f, 13.0f, 2.0f, 6.0f, 34.0f, 49.0f,
          45.0f, 83.0f, 6.0f, 2.0f, 26.0f, 57.0f, 14.0f, 46.0f, 19.0f, 9.0f, 4.0f, 13.0f, 53.0f,
          104.0f, 33.0f, 11.0f, 25.0f, 19.0f, 30.0f, 10.0f, 7.0f, 2.0f, 8.0f, 7.0f, 25.0f, 1.0f,
          2.0f, 25.0f, 24.0f, 28.0f, 61.0f, 83.0f, 41.0f, 9.0f, 14.0f, 3.0f, 7.0f, 114.0f, 114.0f,
          114.0f, 114.0f, 5.0f, 5.0f, 1.0f, 5.0f, 114.0f, 73.0f, 75.0f, 106.0f, 3.0f, 5.0f, 6.0f,
          6.0f, 8.0f, 15.0f, 45.0f, 2.0f, 15.0f, 7.0f, 114.0f, 103.0f, 6.0f, 5.0f, 4.0f, 9.0f,
          67.0f, 47.0f, 22.0f, 32.0f, 27.0f, 41.0f, 10.0f, 114.0f, 36.0f, 43.0f, 42.0f, 23.0f, 9.0f,
          7.0f, 30.0f, 114.0f, 19.0f, 7.0f, 5.0f, 6.0f, 6.0f, 21.0f, 48.0f, 2.0f, 1.0f, 0.0f, 8.0f,
          114.0f, 13.0f, 0.0f, 1.0f, 53.0f, 83.0f, 14.0f, 8.0f, 16.0f, 12.0f, 16.0f, 20.0f, 27.0f,
          87.0f, 45.0f, 50.0f, 15.0f, 5.0f, 5.0f, 6.0f, 32.0f, 49.0f
        };
    byte[] destination = new byte[dimensions / 8 * BQSpaceUtils.B_QUERY];
    float[] centroid =
        new float[] {
          26.7f, 16.2f, 10.913f, 10.314f, 12.12f, 14.045f, 15.887f, 16.864f, 32.232f, 31.567f,
          34.922f, 21.624f, 16.349f, 29.625f, 31.994f, 22.044f, 37.847f, 24.622f, 36.299f, 27.966f,
          14.368f, 19.248f, 30.778f, 35.927f, 27.019f, 16.381f, 17.325f, 16.517f, 13.272f, 9.154f,
          9.242f, 17.995f, 53.777f, 23.011f, 12.929f, 16.128f, 22.16f, 28.643f, 25.861f, 27.197f,
          59.883f, 40.878f, 34.153f, 22.795f, 24.402f, 37.427f, 34.19f, 29.288f, 61.812f, 26.355f,
          39.071f, 37.789f, 23.33f, 22.299f, 28.64f, 47.828f, 52.457f, 21.442f, 24.039f, 29.781f,
          27.707f, 19.484f, 14.642f, 28.757f, 54.567f, 20.936f, 25.112f, 25.521f, 22.077f, 18.272f,
          14.526f, 29.054f, 61.803f, 24.509f, 37.517f, 35.906f, 24.106f, 22.64f, 32.1f, 48.788f,
          60.102f, 39.625f, 34.766f, 22.497f, 24.397f, 41.599f, 38.419f, 30.99f, 55.647f, 25.115f,
          14.96f, 18.882f, 26.918f, 32.442f, 26.231f, 27.107f, 26.828f, 15.968f, 18.668f, 14.071f,
          10.906f, 8.989f, 9.721f, 17.294f, 36.32f, 21.854f, 35.509f, 27.106f, 14.067f, 19.82f,
          33.582f, 35.997f, 33.528f, 30.369f, 36.955f, 21.23f, 15.2f, 30.252f, 34.56f, 22.295f,
          29.413f, 16.576f, 11.226f, 10.754f, 12.936f, 15.525f, 15.868f, 16.43f
        };
    float cDotC = VectorUtil.dotProduct(centroid, centroid);
    BinaryQuantizer.QueryFactors corrections =
        quantizer.quantizeForQuery(vector, destination, centroid, cDotC);

    int sumQ = corrections.quantizedSum();
    float lower = corrections.lower();
    float width = corrections.width();

    assertEquals(729, sumQ);
    assertEquals(-57.883f, lower, 0.001f);
    assertEquals(9.972266f, width, 0.000001f);
    assertArrayEquals(
        new byte[] {
          -77, -49, 73, -17, -89, 9, -43, -27, 40, 15, 42, 76, -122, 38, -22, -37, -96, 111, -63,
          -102, -123, 23, 110, 127, 32, 95, 29, 106, -120, -121, -32, -94, 78, -98, 42, 95, 122,
          114, 30, 18, 91, 97, -5, -9, 123, 122, 31, -66, 49, 1, 20, 48, 0, 12, 30, 30, 4, 96, 2, 2,
          4, 33, 1, 65
        },
        destination);
  }

  // spotless:off
  // <editor-fold desc="MIP Centroid">
  private final float[] mipCentroid =
      new float[] {
        0.16672021f,
        0.11700719f,
        0.013227397f,
        0.09305186f,
        -0.029422699f,
        0.17622353f,
        0.4267106f,
        -0.297038f,
        0.13915674f,
        0.38441318f,
        -0.486725f,
        -0.15987667f,
        -0.19712289f,
        0.1349074f,
        -0.19016947f,
        -0.026179956f,
        0.4129807f,
        0.14325741f,
        -0.09106042f,
        0.06876218f,
        -0.19389102f,
        0.4467732f,
        0.03169017f,
        -0.066950575f,
        -0.044301506f,
        -0.0059755715f,
        -0.33196586f,
        0.18213534f,
        -0.25065416f,
        0.30251458f,
        0.3448419f,
        -0.14900115f,
        -0.07782894f,
        0.3568707f,
        -0.46595258f,
        0.37295088f,
        -0.088741764f,
        0.17248306f,
        -0.0072736046f,
        0.32928637f,
        0.13216197f,
        0.032092985f,
        0.21553043f,
        0.016091486f,
        0.31958902f,
        0.0133126f,
        0.1579258f,
        0.018537233f,
        0.046248164f,
        -0.0048194043f,
        -0.2184672f,
        -0.26273906f,
        -0.110678785f,
        -0.04542999f,
        -0.41625032f,
        0.46025568f,
        -0.16116948f,
        0.4091706f,
        0.18427321f,
        0.004736977f,
        0.16289745f,
        -0.05330932f,
        -0.2694863f,
        -0.14762327f,
        0.17744702f,
        0.2445075f,
        0.14377175f,
        0.37390858f,
        0.16165806f,
        0.17177118f,
        0.097307935f,
        0.36326465f,
        0.23221572f,
        0.15579978f,
        -0.065486655f,
        -0.29006517f,
        -0.009194494f,
        0.009019374f,
        0.32154799f,
        -0.23186184f,
        0.46485493f,
        -0.110756285f,
        -0.18604982f,
        0.35027295f,
        0.19815539f,
        0.47386464f,
        -0.031379268f,
        0.124035835f,
        0.11556784f,
        0.4304302f,
        -0.24455063f,
        0.1816723f,
        0.034300473f,
        -0.034347706f,
        0.040140998f,
        0.1389901f,
        0.22840638f,
        -0.19911191f,
        0.07563166f,
        -0.2744902f,
        0.13114859f,
        -0.23862572f,
        -0.31404558f,
        0.41355187f,
        0.12970817f,
        -0.35403475f,
        -0.2714075f,
        0.07231573f,
        0.043893218f,
        0.30324167f,
        0.38928393f,
        -0.1567055f,
        -0.0083288215f,
        0.0487653f,
        0.12073729f,
        -0.01582117f,
        0.13381198f,
        -0.084824145f,
        -0.15329859f,
        -1.120622f,
        0.3972598f,
        0.36022213f,
        -0.29826534f,
        -0.09468781f,
        0.03550699f,
        -0.21630692f,
        0.55655843f,
        -0.14842057f,
        0.5924833f,
        0.38791573f,
        0.1502777f,
        0.111737385f,
        0.1926823f,
        0.66021144f,
        0.25601995f,
        0.28220543f,
        0.10194068f,
        0.013066262f,
        -0.09348819f,
        -0.24085014f,
        -0.17843121f,
        -0.012598432f,
        0.18757571f,
        0.48543528f,
        -0.059388146f,
        0.1548026f,
        0.041945867f,
        0.3322589f,
        0.012830887f,
        0.16621992f,
        0.22606649f,
        0.13959105f,
        -0.16688728f,
        0.47194278f,
        -0.12767595f,
        0.037815034f,
        0.441938f,
        0.07875027f,
        0.08625042f,
        0.053454693f,
        0.74093896f,
        0.34662113f,
        0.009829135f,
        -0.033400282f,
        0.030965377f,
        0.17645596f,
        0.083803624f,
        0.32578796f,
        0.49538168f,
        -0.13212465f,
        -0.39596975f,
        0.109529115f,
        0.2815771f,
        -0.051440604f,
        0.21889819f,
        0.25598505f,
        0.012208843f,
        -0.012405662f,
        0.3248759f,
        0.00997502f,
        0.05999008f,
        0.03562817f,
        0.19007418f,
        0.24805716f,
        0.5926766f,
        0.26937613f,
        0.25856f,
        -0.05798439f,
        -0.29168302f,
        0.14050555f,
        0.084851265f,
        -0.03763504f,
        0.8265359f,
        -0.23383066f,
        -0.042164285f,
        0.19120507f,
        -0.12189065f,
        0.3864055f,
        -0.19823311f,
        0.30280992f,
        0.10814344f,
        -0.164514f,
        -0.22905481f,
        0.13680641f,
        0.4513772f,
        -0.514546f,
        -0.061746247f,
        0.11598224f,
        -0.23093395f,
        -0.09735358f,
        0.02767051f,
        0.11594536f,
        0.17106244f,
        0.21301728f,
        -0.048222974f,
        0.2212131f,
        -0.018857865f,
        -0.09783516f,
        0.42156664f,
        -0.14032331f,
        -0.103861615f,
        0.4190284f,
        0.068923555f,
        -0.015083771f,
        0.083590426f,
        -0.15759592f,
        -0.19096768f,
        -0.4275228f,
        0.12626286f,
        0.12192557f,
        0.4157616f,
        0.048780657f,
        0.008426048f,
        -0.0869124f,
        0.054927208f,
        0.28417027f,
        0.29765493f,
        0.09203619f,
        -0.14446871f,
        -0.117514975f,
        0.30662632f,
        0.24904715f,
        -0.19551662f,
        -0.0045785015f,
        0.4217626f,
        -0.31457824f,
        0.23381722f,
        0.089111514f,
        -0.27170828f,
        -0.06662652f,
        0.10011391f,
        -0.090274535f,
        0.101849966f,
        0.26554734f,
        -0.1722843f,
        0.23296228f,
        0.25112453f,
        -0.16790418f,
        0.010348314f,
        0.05061285f,
        0.38003662f,
        0.0804625f,
        0.3450673f,
        0.364368f,
        -0.2529952f,
        -0.034065288f,
        0.22796603f,
        0.5457553f,
        0.11120353f,
        0.24596325f,
        0.42822433f,
        -0.19215727f,
        -0.06974534f,
        0.19388479f,
        -0.17598474f,
        -0.08769705f,
        0.12769659f,
        0.1371616f,
        -0.4636819f,
        0.16870509f,
        0.14217548f,
        0.04412187f,
        -0.20930687f,
        0.0075530168f,
        0.10065227f,
        0.45334083f,
        -0.1097471f,
        -0.11139921f,
        -0.31835595f,
        -0.057386875f,
        0.16285825f,
        0.5088513f,
        -0.06318843f,
        -0.34759882f,
        0.21132466f,
        0.33609292f,
        0.04858872f,
        -0.058759f,
        0.22845529f,
        -0.07641319f,
        0.5452827f,
        -0.5050389f,
        0.1788054f,
        0.37428045f,
        0.066334985f,
        -0.28162515f,
        -0.15629752f,
        0.33783385f,
        -0.0832242f,
        0.29144394f,
        0.47892854f,
        -0.47006592f,
        -0.07867588f,
        0.3872869f,
        0.28053126f,
        0.52399015f,
        0.21979983f,
        0.076880336f,
        0.47866163f,
        0.252952f,
        -0.1323851f,
        -0.22225754f,
        -0.38585815f,
        0.12967427f,
        0.20340872f,
        -0.326928f,
        0.09636557f,
        -0.35929212f,
        0.5413311f,
        0.019960884f,
        0.33512768f,
        0.15133342f,
        -0.14124066f,
        -0.1868793f,
        -0.07862198f,
        0.22739467f,
        0.19598985f,
        0.34314656f,
        -0.05071516f,
        -0.21107961f,
        0.19934991f,
        0.04822684f,
        0.15060754f,
        0.26586458f,
        -0.15528078f,
        0.123646654f,
        0.14450715f,
        -0.12574252f,
        0.30608323f,
        0.018549249f,
        0.36323825f,
        0.06762097f,
        0.08562406f,
        -0.07863075f,
        0.15975896f,
        0.008347004f,
        0.37931192f,
        0.22957338f,
        0.33606857f,
        -0.25204057f,
        0.18126069f,
        0.41903302f,
        0.20244692f,
        -0.053850617f,
        0.23088565f,
        0.16085246f,
        0.1077502f,
        -0.12445943f,
        0.115779735f,
        0.124704875f,
        0.13076028f,
        -0.11628619f,
        -0.12580182f,
        0.065204754f,
        -0.26290357f,
        -0.23539798f,
        -0.1855292f,
        0.39872098f,
        0.44495568f,
        0.05491784f,
        0.05135692f,
        0.624011f,
        0.22839564f,
        0.0022447354f,
        -0.27169296f,
        -0.1694988f,
        -0.19106841f,
        0.0110123325f,
        0.15464798f,
        -0.16269256f,
        0.04033836f,
        -0.11792753f,
        0.17172396f,
        -0.08912173f,
        -0.30929542f,
        -0.03446989f,
        -0.21738084f,
        0.39657044f,
        0.33550346f,
        -0.06839139f,
        0.053675443f,
        0.33783767f,
        0.22576828f,
        0.38280004f,
        4.1448855f,
        0.14225426f,
        0.24038498f,
        0.072373435f,
        -0.09465926f,
        -0.016144043f,
        0.40864578f,
        -0.2583055f,
        0.031816103f,
        0.062555805f,
        0.06068663f,
        0.25858644f,
        -0.10598804f,
        0.18201788f,
        -0.00090025424f,
        0.085680895f,
        0.4304161f,
        0.028686283f,
        0.027298616f,
        0.27473378f,
        -0.3888415f,
        0.44825438f,
        0.3600378f,
        0.038944595f,
        0.49292335f,
        0.18556066f,
        0.15779617f,
        0.29989767f,
        0.39233804f,
        0.39759228f,
        0.3850708f,
        -0.0526475f,
        0.18572918f,
        0.09667526f,
        -0.36111078f,
        0.3439669f,
        0.1724522f,
        0.14074509f,
        0.26097745f,
        0.16626832f,
        -0.3062964f,
        -0.054877423f,
        0.21702516f,
        0.4736452f,
        0.2298038f,
        -0.2983771f,
        0.118479654f,
        0.35940516f,
        0.12212727f,
        0.17234904f,
        0.30632678f,
        0.09207966f,
        -0.14084268f,
        -0.19737118f,
        0.12442629f,
        0.52454203f,
        0.1266684f,
        0.3062802f,
        0.121598125f,
        -0.09156268f,
        0.11491686f,
        -0.105715364f,
        0.19831072f,
        0.061421417f,
        -0.41778997f,
        0.14488487f,
        0.023310646f,
        0.27257463f,
        0.16821945f,
        -0.16702746f,
        0.263203f,
        0.33512688f,
        0.35117313f,
        -0.31740817f,
        -0.14203706f,
        0.061256267f,
        -0.19764185f,
        0.04822579f,
        -0.0016218472f,
        -0.025792575f,
        0.4885193f,
        -0.16942391f,
        -0.04156327f,
        0.15908112f,
        -0.06998626f,
        0.53907114f,
        0.10317832f,
        -0.365468f,
        0.4729886f,
        0.14291425f,
        0.32812154f,
        -0.0273262f,
        0.31760117f,
        0.16925456f,
        0.21820979f,
        0.085142255f,
        0.16118735f,
        -3.7089362f,
        0.251577f,
        0.18394576f,
        0.027926167f,
        0.15720351f,
        0.13084261f,
        0.16240814f,
        0.23045056f,
        -0.3966458f,
        0.22822891f,
        -0.061541352f,
        0.028320132f,
        -0.14736478f,
        0.184569f,
        0.084853746f,
        0.15172474f,
        0.08277542f,
        0.27751622f,
        0.23450488f,
        -0.15349835f,
        0.29665688f,
        0.32045734f,
        0.20012043f,
        -0.2749372f,
        0.011832386f,
        0.05976605f,
        0.018300122f,
        -0.07855043f,
        -0.075900674f,
        0.0384252f,
        -0.15101928f,
        0.10922137f,
        0.47396383f,
        -0.1771141f,
        0.2203417f,
        0.33174303f,
        0.36640546f,
        0.10906258f,
        0.13765177f,
        0.2488032f,
        -0.061588854f,
        0.20347528f,
        0.2574979f,
        0.22369152f,
        0.18777567f,
        -0.0772263f,
        -0.1353299f,
        0.087077625f,
        -0.05409276f,
        0.027534787f,
        0.08053508f,
        0.3403908f,
        -0.15362988f,
        0.07499862f,
        0.54367846f,
        -0.045938436f,
        0.12206868f,
        0.031069376f,
        0.2972343f,
        0.3235321f,
        -0.053970363f,
        -0.0042564687f,
        0.21447177f,
        0.023565233f,
        -0.1286087f,
        -0.047359955f,
        0.23021339f,
        0.059837278f,
        0.19709614f,
        -0.17340347f,
        0.11572943f,
        0.21720429f,
        0.29375625f,
        -0.045433592f,
        0.033339307f,
        0.24594454f,
        -0.021661613f,
        -0.12823369f,
        0.41809165f,
        0.093840264f,
        -0.007481906f,
        0.22441079f,
        -0.45719734f,
        0.2292629f,
        2.675806f,
        0.3690025f,
        2.1311781f,
        0.07818368f,
        -0.17055893f,
        0.3162922f,
        -0.2983149f,
        0.21211359f,
        0.037087034f,
        0.021580033f,
        0.086415835f,
        0.13541797f,
        -0.12453424f,
        0.04563163f,
        -0.082379065f,
        -0.15938349f,
        0.38595748f,
        -0.8796574f,
        -0.080991246f,
        0.078572094f,
        0.20274459f,
        0.009252143f,
        -0.12719384f,
        0.105845824f,
        0.1592398f,
        -0.08656061f,
        -0.053054806f,
        0.090986334f,
        -0.02223379f,
        -0.18215932f,
        -0.018316114f,
        0.1806707f,
        0.24788831f,
        -0.041049056f,
        0.01839475f,
        0.19160001f,
        -0.04827654f,
        4.4070687f,
        0.12640671f,
        -0.11171499f,
        -0.015480781f,
        0.14313947f,
        0.10024215f,
        0.4129662f,
        0.038836367f,
        -0.030228542f,
        0.2948598f,
        0.32946473f,
        0.2237934f,
        0.14260699f,
        -0.044821896f,
        0.23791742f,
        0.079720296f,
        0.27059034f,
        0.32129505f,
        0.2725177f,
        0.06883333f,
        0.1478041f,
        0.07598411f,
        0.27230525f,
        -0.04704308f,
        0.045167264f,
        0.215413f,
        0.20359069f,
        -0.092178136f,
        -0.09523752f,
        0.21427691f,
        0.10512272f,
        5.1295033f,
        0.040909242f,
        0.007160441f,
        -0.192866f,
        -0.102640584f,
        0.21103396f,
        -0.006780398f,
        -0.049653083f,
        -0.29426834f,
        -0.0038102255f,
        -0.13842082f,
        0.06620181f,
        -0.3196518f,
        0.33279592f,
        0.13845938f,
        0.16162738f,
        -0.24798508f,
        -0.06672485f,
        0.195944f,
        -0.11957207f,
        0.44237947f,
        -0.07617347f,
        0.13575341f,
        -0.35074243f,
        -0.093798876f,
        0.072853446f,
        -0.20490398f,
        0.26504788f,
        -0.046076056f,
        0.16488416f,
        0.36007464f,
        0.20955376f,
        -0.3082038f,
        0.46533757f,
        -0.27326992f,
        -0.14167665f,
        0.25017953f,
        0.062622115f,
        0.14057694f,
        -0.102370486f,
        0.33898357f,
        0.36456722f,
        -0.10120469f,
        -0.27838466f,
        -0.11779602f,
        0.18517569f,
        -0.05942488f,
        0.076405466f,
        0.007960496f,
        0.0443746f,
        0.098998964f,
        -0.01897129f,
        0.8059487f,
        0.06991939f,
        0.26562217f,
        0.26942885f,
        0.11432197f,
        -0.0055776504f,
        0.054493718f,
        -0.13086213f,
        0.6841702f,
        0.121975765f,
        0.02787146f,
        0.29039973f,
        0.30943078f,
        0.21762547f,
        0.28751117f,
        0.027524523f,
        0.5315654f,
        -0.22451901f,
        -0.13782433f,
        0.08228316f,
        0.07808882f,
        0.17445615f,
        -0.042489477f,
        0.13232234f,
        0.2756272f,
        -0.18824948f,
        0.14326479f,
        -0.119312495f,
        0.011788091f,
        -0.22103515f,
        -0.2477118f,
        -0.10513839f,
        0.034028634f,
        0.10693818f,
        0.03057979f,
        0.04634646f,
        0.2289361f,
        0.09981585f,
        0.26901972f,
        0.1561221f,
        -0.10639886f,
        0.36466748f,
        0.06350991f,
        0.027927283f,
        0.11919768f,
        0.23290513f,
        -0.03417105f,
        0.16698854f,
        -0.19243467f,
        0.28430334f,
        0.03754995f,
        -0.08697018f,
        0.20413163f,
        -0.27218238f,
        0.13707504f,
        -0.082289375f,
        0.03479585f,
        0.2298305f,
        0.4983682f,
        0.34522808f,
        -0.05711886f,
        -0.10568684f,
        -0.07771385f
      };
  // </editor-fold>

  // <editor-fold desc="MIP Vector to Index">
  float[] mipVectorToIndex =
      new float[] {
        0.28656968f,
        -0.031816833f,
        0.06668472f,
        0.03292646f,
        -0.008292826f,
        0.16873491f,
        -0.0008463107f,
        -0.3607788f,
        0.33916593f,
        0.38869756f,
        -0.4148977f,
        0.20758016f,
        -0.114684254f,
        0.38731626f,
        -0.26252425f,
        0.0070962403f,
        0.24166067f,
        -0.24653761f,
        0.060873937f,
        0.23045269f,
        -0.029800616f,
        0.5721307f,
        -0.051111624f,
        -0.095477305f,
        0.10970829f,
        -0.059516504f,
        -0.053682905f,
        0.23981637f,
        -0.3332584f,
        0.36858168f,
        0.18456951f,
        -0.052092902f,
        -0.0061294846f,
        0.5033778f,
        -0.5287379f,
        0.5231741f,
        0.02246415f,
        -0.04248378f,
        0.3180341f,
        -0.11792317f,
        0.07446788f,
        0.24792802f,
        0.20263632f,
        -0.017194698f,
        0.36797294f,
        0.38477525f,
        0.16167532f,
        0.047267713f,
        -0.03529545f,
        0.44717246f,
        -0.3653179f,
        -0.16520369f,
        -0.28060752f,
        0.02405814f,
        -0.63978976f,
        0.42817125f,
        -0.14889406f,
        0.74827814f,
        0.09189224f,
        -0.095406786f,
        0.18637206f,
        -0.20858604f,
        -0.2260437f,
        -0.06464707f,
        0.6534488f,
        0.19247837f,
        0.01797169f,
        0.33982125f,
        0.26752833f,
        0.24325883f,
        -0.10399176f,
        0.17645505f,
        0.40894517f,
        0.030665562f,
        -0.15218715f,
        -0.61055714f,
        -0.29428744f,
        -0.07567915f,
        0.34549752f,
        -0.494812f,
        0.30831045f,
        -0.17011662f,
        -0.3128437f,
        0.4391062f,
        0.07234651f,
        0.10430587f,
        -0.026307607f,
        0.20559411f,
        0.18631804f,
        0.43119732f,
        0.038021814f,
        -0.0058570094f,
        0.18996319f,
        0.062778175f,
        -0.31845254f,
        0.2312614f,
        0.30986103f,
        0.07724857f,
        0.41506475f,
        -0.34802428f,
        0.4107923f,
        -0.29168057f,
        -0.070673995f,
        0.47547993f,
        0.3326416f,
        -0.41482705f,
        -0.24874064f,
        0.36725014f,
        0.027716184f,
        0.07121175f,
        0.13025585f,
        -0.3474667f,
        -0.1965316f,
        0.13502769f,
        0.08115814f,
        -0.3373188f,
        0.08884591f,
        0.03787707f,
        -0.4719399f,
        -0.8052657f,
        0.20728664f,
        0.3810939f,
        -0.09562081f,
        -0.34648213f,
        -0.13760938f,
        0.25405884f,
        0.442794f,
        -0.13041416f,
        0.5964741f,
        0.010401274f,
        0.43831915f,
        0.27013758f,
        0.35238487f,
        0.56441456f,
        0.17955218f,
        0.39865434f,
        0.08586122f,
        -0.22568552f,
        0.0066010323f,
        -0.15003185f,
        -0.32035264f,
        0.091986105f,
        0.15690371f,
        0.64182f,
        -0.20641609f,
        0.2977327f,
        0.0741393f,
        0.3141094f,
        -0.116059154f,
        0.26304546f,
        0.05299217f,
        0.4051096f,
        -0.16452609f,
        0.42757377f,
        -0.19831306f,
        -0.059744786f,
        0.37306938f,
        0.12946972f,
        0.065914854f,
        0.0026743035f,
        0.77152294f,
        0.37810957f,
        0.036065504f,
        -0.13005276f,
        0.06347007f,
        0.054491043f,
        -0.14689094f,
        0.18161412f,
        0.54644454f,
        -0.28611675f,
        -0.35536918f,
        0.25846124f,
        -0.12521563f,
        0.038964797f,
        0.08660909f,
        0.22943437f,
        -0.33579135f,
        0.15364577f,
        0.2454585f,
        0.12137624f,
        0.08301324f,
        0.12118129f,
        0.017303064f,
        0.021334222f,
        0.7360583f,
        0.33854595f,
        -0.028487256f,
        0.45724005f,
        -0.3861566f,
        0.054880068f,
        0.30431646f,
        0.17513837f,
        0.60361683f,
        0.09628557f,
        -0.016407214f,
        -0.10085317f,
        -0.07561121f,
        0.6035606f,
        -0.33989516f,
        0.26094094f,
        0.12191627f,
        -0.3224612f,
        -0.3842131f,
        0.1512925f,
        0.39156303f,
        -0.3651685f,
        -0.16117397f,
        0.27988634f,
        -0.1376675f,
        -0.0917502f,
        0.31908536f,
        0.023382965f,
        0.2646645f,
        0.26519614f,
        0.04061907f,
        0.10488866f,
        -0.45851216f,
        0.1884091f,
        0.50063926f,
        -0.14506483f,
        -0.38471743f,
        0.42818412f,
        0.120690055f,
        -0.20526685f,
        -0.06628548f,
        -0.2700878f,
        -0.24891904f,
        -0.2921006f,
        0.04938045f,
        0.2603792f,
        0.4212807f,
        0.13811463f,
        0.04269601f,
        -0.13996084f,
        0.47889468f,
        0.39469507f,
        0.2680873f,
        -0.08945104f,
        -0.21502364f,
        -0.13715443f,
        0.496415f,
        0.31185752f,
        -0.26615182f,
        0.12037202f,
        0.39540502f,
        -0.4782795f,
        0.23368435f,
        0.18803255f,
        -0.32501864f,
        0.060293287f,
        0.18794973f,
        0.10011887f,
        -0.18554747f,
        0.6393529f,
        -0.39935625f,
        0.03438317f,
        0.22119743f,
        0.04337543f,
        -0.10127238f,
        0.26272422f,
        -0.026716307f,
        0.38157412f,
        0.39801347f,
        0.37298584f,
        -0.088545345f,
        0.035118055f,
        0.07762056f,
        0.456498f,
        0.22481497f,
        0.44760934f,
        0.5736598f,
        -0.30500874f,
        -0.37355766f,
        -0.084501214f,
        -0.29109272f,
        0.07468992f,
        0.24051887f,
        -0.023308754f,
        -0.1927145f,
        0.48839048f,
        0.1763647f,
        0.21627049f,
        0.061786048f,
        -0.12110259f,
        -0.08729856f,
        0.2450666f,
        -0.20312941f,
        0.013679153f,
        -0.29400796f,
        0.011491299f,
        0.38202867f,
        0.53890187f,
        -0.4484799f,
        -0.07749909f,
        0.4301011f,
        0.08133974f,
        0.23992759f,
        0.06538552f,
        0.32349917f,
        0.0012188961f,
        0.2903852f,
        -0.5572124f,
        0.4453639f,
        0.622822f,
        -0.09398691f,
        -0.2335928f,
        -0.1025491f,
        0.38501158f,
        -0.1292693f,
        0.5685023f,
        0.41174316f,
        -0.047555797f,
        -0.019547425f,
        0.25464952f,
        0.33720157f,
        0.40935317f,
        0.2740816f,
        0.062327698f,
        0.4308825f,
        0.013965205f,
        0.09060493f,
        -0.15039414f,
        -0.31853926f,
        -0.20217253f,
        0.110010825f,
        -0.21586931f,
        0.06240142f,
        -0.30649927f,
        0.68255293f,
        -0.16824019f,
        0.48771587f,
        -0.051207792f,
        -0.3873034f,
        -0.21017857f,
        -0.017940722f,
        0.28201455f,
        0.3361961f,
        0.12781976f,
        -0.34623477f,
        -0.17263445f,
        0.3575086f,
        0.14479326f,
        0.27448955f,
        0.101877116f,
        0.15755342f,
        0.25385806f,
        0.048348475f,
        0.0016955828f,
        0.6337826f,
        -0.17661767f,
        0.09960807f,
        0.34014893f,
        -0.06126765f,
        -0.2829686f,
        -0.11151625f,
        0.34362432f,
        0.64987665f,
        0.4685894f,
        0.41080514f,
        -0.25725034f,
        0.1987642f,
        0.13549724f,
        0.004581903f,
        0.110672f,
        0.2077187f,
        -0.03323023f,
        0.25866538f,
        0.014004758f,
        0.1451936f,
        0.01824389f,
        0.10280649f,
        -0.11864231f,
        -0.10857914f,
        0.14212818f,
        -0.19348606f,
        -0.3796419f,
        -0.22157769f,
        0.3301498f,
        0.31020957f,
        -0.20829843f,
        -0.019206699f,
        0.6531404f,
        -0.05998737f,
        0.1439979f,
        -0.09000296f,
        -0.070642926f,
        -0.18810683f,
        0.13312852f,
        -0.06545589f,
        -0.32616225f,
        -0.21396872f,
        -0.06106733f,
        0.14658476f,
        0.17556281f,
        0.044241723f,
        -0.10770517f,
        -0.37176192f,
        0.33311543f,
        0.5682951f,
        -0.38330078f,
        0.121697724f,
        0.13550206f,
        0.23339763f,
        0.34563246f,
        4.2845397f,
        0.22001578f,
        0.54418945f,
        -0.08446613f,
        -0.10732636f,
        0.2927985f,
        0.23199342f,
        0.09014612f,
        -0.033125676f,
        0.032398827f,
        -0.31755146f,
        0.44549882f,
        -0.10897932f,
        0.26820776f,
        -0.060533155f,
        0.304665f,
        0.2874531f,
        -0.17072417f,
        0.16673055f,
        0.44610274f,
        -0.47802734f,
        0.45786646f,
        0.36010098f,
        0.16690364f,
        0.1891093f,
        0.32723516f,
        0.23796543f,
        0.007548684f,
        0.36112976f,
        0.2867014f,
        0.31249198f,
        0.18435188f,
        0.2555052f,
        0.1436069f,
        -0.2347926f,
        0.25815383f,
        0.59885126f,
        0.0729077f,
        0.0969676f,
        -0.03759482f,
        -0.22836946f,
        -0.09362236f,
        0.33714536f,
        0.44595176f,
        0.2637835f,
        0.03847338f,
        0.13471302f,
        0.4989142f,
        -0.10473457f,
        0.18413423f,
        0.21653347f,
        -0.56051475f,
        0.16675688f,
        -0.48057154f,
        0.43685752f,
        0.52138156f,
        0.08104084f,
        0.16164076f,
        0.026912337f,
        0.36404902f,
        0.08747266f,
        0.10587346f,
        0.23281167f,
        0.23328921f,
        -0.4068756f,
        0.06511874f,
        -0.101549506f,
        0.3210417f,
        -0.008097447f,
        0.017626511f,
        0.61260664f,
        0.35691753f,
        0.52812755f,
        -0.29387945f,
        -0.15749961f,
        0.09114744f,
        -0.16725178f,
        0.11560018f,
        0.20628999f,
        0.029014679f,
        0.28021774f,
        -0.27466783f,
        0.295317f,
        0.2441882f,
        -0.02031236f,
        0.36849815f,
        0.14236932f,
        -0.4147082f,
        0.5529207f,
        0.124705665f,
        0.25533414f,
        -0.19315955f,
        0.15268014f,
        0.20796064f,
        0.066302046f,
        -0.15867013f,
        0.22838843f,
        -4.0225124f,
        0.2735692f,
        0.301239f,
        0.118896484f,
        -0.056547616f,
        0.20942688f,
        0.15526514f,
        0.7270508f,
        -0.7852205f,
        0.37594444f,
        0.18058296f,
        0.1309711f,
        -0.14404096f,
        0.1785968f,
        0.030021265f,
        0.21234412f,
        -0.36818334f,
        0.23100843f,
        0.13331805f,
        -0.14330894f,
        0.04924463f,
        0.2065546f,
        0.17189427f,
        -0.30554682f,
        -0.14598054f,
        0.06280156f,
        0.006171528f,
        -0.16404895f,
        0.1137866f,
        -0.100792736f,
        0.07567536f,
        -0.26789212f,
        0.3255294f,
        -0.043992896f,
        -0.039160077f,
        0.85796154f,
        0.60520536f,
        -0.07195322f,
        0.07071104f,
        0.20466533f,
        -0.027603552f,
        -0.1023406f,
        0.42864668f,
        0.18425952f,
        -0.13775715f,
        0.160919f,
        0.08498568f,
        -0.20159431f,
        -0.10155577f,
        0.013227965f,
        -0.20822345f,
        0.36968032f,
        -0.43546334f,
        0.14067349f,
        0.4097065f,
        -0.031057859f,
        0.18410929f,
        0.099142276f,
        0.33641616f,
        -0.057425648f,
        0.37223253f,
        -0.20612536f,
        0.2016208f,
        -0.20109348f,
        -0.19091396f,
        0.15667002f,
        0.53922313f,
        0.17569846f,
        0.20031731f,
        -0.4921887f,
        -0.17545861f,
        0.095078416f,
        0.052160162f,
        -0.47475395f,
        0.105302714f,
        -0.17937951f,
        0.0123860715f,
        -0.23876953f,
        0.5675884f,
        0.010750419f,
        -0.33095512f,
        0.19116311f,
        -0.41661954f,
        0.0870791f,
        2.1907895f,
        0.24288137f,
        2.1987562f,
        0.33133417f,
        -0.2902688f,
        0.28281602f,
        -0.5240511f,
        0.31428608f,
        -0.08435169f,
        0.2772827f,
        -0.09022643f,
        0.2253232f,
        0.2496627f,
        -0.15450768f,
        0.2987442f,
        -0.28217515f,
        0.42979673f,
        -1.2092799f,
        0.19874974f,
        0.15130626f,
        0.44700864f,
        0.0168185f,
        0.036813397f,
        0.18855928f,
        0.16894989f,
        -0.1627132f,
        0.062898934f,
        -0.016446568f,
        0.16717288f,
        -0.19460738f,
        -0.022446468f,
        0.15522605f,
        0.3957391f,
        0.13821049f,
        -0.29831657f,
        0.11945268f,
        0.30776495f,
        4.693051f,
        0.5632517f,
        -0.18961374f,
        -0.03660448f,
        -0.0153531525f,
        -0.021193253f,
        0.32982114f,
        0.0052383826f,
        0.08648139f,
        0.4567293f,
        0.5685714f,
        0.37937364f,
        -0.009226196f,
        0.0045943763f,
        0.3460597f,
        0.059965033f,
        -0.06329546f,
        0.20386626f,
        0.42983526f,
        0.07834776f,
        0.4714484f,
        0.5004048f,
        0.14989321f,
        -0.1502821f,
        0.0889729f,
        0.26620644f,
        0.3714921f,
        0.21561633f,
        -0.13234349f,
        0.23387828f,
        -0.12425232f,
        5.4306126f,
        0.10545967f,
        0.100925244f,
        -0.19202705f,
        -0.08889387f,
        0.2313875f,
        -0.18530595f,
        -0.22782631f,
        -0.44351998f,
        0.0009954352f,
        0.016801573f,
        0.27173012f,
        -0.0757429f,
        0.23161574f,
        0.07229333f,
        -0.21626f,
        -0.15140533f,
        -0.1725749f,
        -0.29343295f,
        -0.15047014f,
        0.3652954f,
        -0.400177f,
        -0.067366876f,
        -0.38366178f,
        -0.30703253f,
        0.041249227f,
        -0.1376126f,
        0.03843448f,
        0.0633052f,
        -0.034046073f,
        0.3038555f,
        0.056708384f,
        -0.59677607f,
        0.31936163f,
        -0.15353675f,
        0.11268244f,
        0.41478848f,
        0.23501758f,
        0.30039415f,
        0.12519982f,
        0.5825131f,
        0.15265986f,
        -0.15289468f,
        0.06463192f,
        -0.16758206f,
        0.17294793f,
        0.0044676126f,
        0.05700724f,
        -0.24679084f,
        0.15486908f,
        -0.017945603f,
        0.010384459f,
        0.8929251f,
        -0.11760511f,
        0.2967481f,
        0.5249537f,
        0.0052471664f,
        -0.04418343f,
        -0.017705992f,
        -0.30794325f,
        0.66526395f,
        0.23535879f,
        0.016385023f,
        0.1428576f,
        0.11801549f,
        0.4124563f,
        0.2511135f,
        -0.0963974f,
        0.6665425f,
        -0.18805856f,
        -0.047101535f,
        0.025404073f,
        0.0938461f,
        0.59619784f,
        -0.14071333f,
        0.03906239f,
        0.09347564f,
        -0.17232433f,
        0.15444103f,
        -0.13743551f,
        -0.32361484f,
        -0.01687006f,
        -0.05899841f,
        0.27453935f,
        -0.10361523f,
        0.1868507f,
        0.03808724f,
        0.022515398f,
        0.2735897f,
        0.07945111f,
        0.25346616f,
        0.0019370631f,
        -0.088570945f,
        0.08444155f,
        -0.32568842f,
        0.1016657f,
        -0.1116918f,
        0.52106357f,
        0.26688537f,
        -0.033846505f,
        -0.15325685f,
        0.14960761f,
        -0.16373344f,
        -0.15300189f,
        0.22388017f,
        -0.05141007f,
        -0.15400435f,
        0.0009964014f,
        0.054337528f,
        -0.055890515f,
        0.3482152f,
        0.53808594f,
        0.060190603f,
        -0.23623095f,
        -0.07120411f
      };
  // </editor-fold>

  // <editor-fold desc="MIP Vector to Query">
  float[] mipVectorToQuery =
      new float[] {
        0.1391397f, 0.33853626f, 0.04266606f, 0.1576074f, -0.19631316f, 0.5048832f, 1.1157516f,
        -0.16828595f, 0.22497046f, 0.523194f, -0.5327304f, -0.34523016f, 0.6087152f, 0.7565557f,
        0.26816836f, 0.3895794f, -0.028533524f, 0.76427346f, -0.4989873f, 0.10831592f, -0.66080517f,
        0.32279688f, 0.5318872f, 0.23507327f, -0.21484603f, 0.50254995f, -0.15003021f, 0.14217806f,
        -0.5102311f, 0.09741996f, 0.65086144f, 0.18318872f, 0.056960557f, 0.5336327f, -0.8644271f,
        0.42301568f, -0.07543745f, 0.4845807f, 0.59564203f, 0.53883743f, -0.08589564f, -0.24628063f,
        -0.1961314f, 0.18118393f, 0.1987749f, 0.8419671f, -0.50268936f, 0.33220613f, 0.5576393f,
        -0.43299213f, 0.022324644f, -0.86919767f, -0.3330647f, -0.49289533f, -0.23746772f,
            1.1479284f,
        0.16581492f, 0.5389916f, 0.3011565f, 0.50293654f, 0.16610692f, -0.1949958f, 0.019053362f,
        -0.027091026f, 0.76067114f, 0.84797347f, 0.5902047f, 0.45289195f, 0.45928374f, 0.49540672f,
        0.254042f, 0.24190715f, 0.06097602f, -0.5294333f, 0.22884141f, -0.15200286f, -0.30951697f,
        0.27636933f, 0.5273697f, -0.4486282f, 1.6206536f, -0.11766291f, -0.39530143f, 0.88623446f,
        0.1126112f, 0.52544767f, -0.18937068f, -0.12752798f, 0.2268325f, 0.55851406f, -0.3359863f,
        0.037334323f, -0.23251045f, 0.43609238f, -0.058115885f, -0.03574047f, 0.2536724f,
            -0.14517982f,
        -0.34340608f, -0.38770828f, 0.23673983f, -0.37609664f, -0.2456555f, 0.75476855f,
            -0.026140576f,
        -0.40665507f, -0.40767524f, 0.4164719f, 0.29006553f, 0.044382107f, 0.13469127f, 0.3954892f,
        0.5425066f, 0.26705942f, 0.52284783f, -0.34934264f, -0.0758758f, -0.40169856f,
            -0.049549945f,
        -1.53052f, 0.81222296f, 0.8738672f, -0.35821614f, 0.18885963f, -0.08362679f, -0.9574897f,
        0.5739417f, 0.03905685f, 0.38510552f, -0.0683321f, -0.3876454f, 0.58699095f, 0.61159664f,
        0.63513666f, 0.44660348f, -0.041796796f, 0.1733916f, -0.17565775f, -0.51472634f,
            0.40947175f,
        0.19147448f, -0.004701941f, 0.5036111f, 0.5775507f, -0.33720523f, 0.23558629f, -0.3278384f,
        0.6763065f, 0.13001737f, 0.06298921f, 0.46700823f, -0.5087948f, 0.044846497f, 0.9268253f,
        -0.23034136f, -0.23204474f, 0.4584774f, -0.19883582f, -0.45055544f, 0.2975194f, 0.70977783f,
        0.40663108f, -0.6130716f, -0.26704636f, 0.097665496f, 0.08574491f, -0.26648358f,
            0.42170957f,
        0.7020802f, 0.19707456f, -0.80874074f, -0.09848868f, 0.08267509f, -0.15982693f, -0.2889039f,
        0.63409185f, -0.19382966f, -0.2976001f, 0.24336885f, 0.3642391f, -0.10973782f, -0.53450215f,
        0.7576575f, -0.4557429f, 0.74077487f, -0.05481937f, -0.32558748f, -0.002357006f,
            -0.029566564f,
        0.24073006f, 0.24499421f, -0.5331936f, 0.6578249f, 0.11338287f, -0.44128492f, 0.4084953f,
        -0.43044648f, 0.24725854f, -0.13986216f, 0.023542767f, -0.43506643f, 0.48823804f,
            -0.10811386f,
        -0.057923317f, 1.1729897f, -0.4141711f, 0.5225193f, -0.44628024f, -0.07101447f,
            -0.07532948f,
        -0.0126166595f, 0.07072163f, -0.15660271f, 0.82663786f, -0.11053404f, 0.8172792f,
            -0.7900443f,
        -0.025424788f, 0.4251263f, -0.5113431f, -0.36845866f, 0.3501501f, -0.20874429f,
            0.052568387f,
        0.41585743f, 0.06374302f, -0.49126896f, -0.5661552f, -0.10350366f, 0.19230355f, 0.41781503f,
        0.20316486f, 0.1116298f, -0.22801876f, -0.40228292f, 0.051632244f, 0.1793651f,
            -0.034618553f,
        -0.035000313f, -0.7807632f, 0.9679389f, 0.1372824f, -0.31861174f, -0.21171685f, 0.27563226f,
        -0.881328f, -0.15769885f, -0.18589361f, -0.33525825f, -0.20881979f, 0.08422944f,
            -0.2225783f,
        0.35844883f, -0.13577434f, -0.07181026f, 0.03890494f, 0.87300855f, 0.12614281f, 0.05185479f,
        0.010206408f, 0.34667814f, 0.43364283f, 0.09482003f, 0.37019148f, -0.42711323f,
            -0.16622694f,
        0.67045355f, 0.7004154f, -0.1968298f, 0.25852278f, 0.5706202f, -0.0040864316f, 0.554029f,
        0.09285884f, 0.17975838f, 0.36546412f, 0.91600657f, -0.4049112f, -0.8638177f, 0.6476354f,
        0.14166947f, -0.229425f, -0.19553247f, 0.4335926f, 0.6283183f, 0.84007406f, -0.36385098f,
        -0.46501312f, -0.34758225f, 0.18984172f, 0.36230916f, 0.657602f, -0.2643497f, -0.5614402f,
        0.44395152f, -0.27825636f, 0.65710187f, 0.098906346f, 0.8816745f, 0.10676107f, 0.98543346f,
        -0.26554835f, -0.020115376f, -0.045583397f, 0.030864578f, -0.5745615f, 0.14603004f,
            1.0572445f,
        -0.1349972f, 0.572959f, -0.21967639f, -0.105048984f, 0.00023198442f, -0.1384835f,
            -0.62466913f,
        0.18020482f, 1.2048484f, -0.009149774f, 0.5913246f, 0.13182716f, -0.38022083f, -0.19685972f,
        -0.5150363f, 0.55048794f, 0.15065998f, -0.23820533f, 0.20902248f, 0.021100935f, 1.1417269f,
        -0.8548022f, 0.8144269f, -0.3684851f, -0.12608755f, -0.7367927f, -0.010480126f, 0.0552346f,
        0.11637133f, 0.24845636f, 0.031409062f, -0.20036349f, 0.47740003f, 0.121682696f,
            0.008167907f,
        0.431529f, -0.6732593f, 0.033821423f, 0.2651085f, -0.41500112f, 0.35173666f, 0.047864318f,
        0.22629482f, -0.116017155f, 0.3020098f, 0.5055906f, 0.5472327f, -0.14469978f, 0.5228705f,
        0.019112637f, 0.80438876f, -0.27966246f, 0.11653313f, 0.26763502f, -0.5000269f,
            -0.16717088f,
        0.27267855f, 0.5049231f, -0.08209163f, 0.15344943f, 0.5585513f, -0.59254354f, -0.2000945f,
        0.6887657f, -0.45545924f, 0.32735446f, -0.41984075f, -0.34191072f, -0.122232735f,
            0.13217133f,
        0.62338614f, -0.6744574f, 0.019288993f, 0.6452267f, -0.4954925f, 0.28323334f, -1.2090985f,
        0.11903499f, -0.10210567f, -0.015279761f, -0.07926424f, -0.31250006f, 0.36122686f,
            -0.20030198f,
        0.32580686f, 0.1318333f, -0.42185894f, -0.5172038f, -0.3220496f, 0.7332642f, -0.047023334f,
        0.3450266f, 0.3705636f, -0.03964933f, 0.27442962f, 1.5291941f, 3.5153294f, 0.36937487f,
        0.5352155f, -0.7552238f, 0.016150111f, -0.42425492f, 0.1419585f, -0.7854562f, -0.47308967f,
        0.014381182f, 0.30926523f, -0.33833465f, -0.2510059f, 0.7850916f, -0.6036317f, 0.14249396f,
        0.748442f, -0.26309073f, -0.41191205f, 0.45910746f, -0.5350359f, 0.70908314f, 0.24871038f,
        -0.94542074f, 0.89655674f, 0.23894762f, 0.0904888f, -0.51136f, 0.58632404f, 0.1412231f,
        0.55894893f, 0.22532463f, 0.4618545f, -0.007218135f, -0.8163741f, -0.08696295f, 0.316225f,
        0.13924293f, 0.4176716f, 0.27704826f, -0.3201369f, 0.0854411f, 0.33202875f, 0.7038414f,
        0.84656817f, -0.11970109f, 0.17892165f, 0.43795374f, -0.12920743f, 0.30797032f,
            -0.37997964f,
        -0.069626845f, -0.006493838f, -0.61858135f, 0.325562f, 0.5780472f, -0.086465895f,
            0.27450803f,
        -0.027424473f, -0.014263715f, 0.44172597f, -0.47713926f, -0.13982017f, 0.43948364f,
            -0.2798027f,
        0.5870862f, -0.085065f, 0.65828514f, -0.52113104f, -0.31681976f, 0.28622356f, 0.42676133f,
        0.6330129f, -0.06469428f, -0.004695723f, 0.22346732f, -0.26070833f, -0.25761238f,
            0.12172443f,
        -0.131189f, 0.9979164f, -0.2102665f, -0.22635794f, -0.051609263f, -0.27901062f, 0.46800593f,
        -0.026758822f, -0.51678103f, 0.56573063f, 0.4750022f, 0.50941294f, 0.23132184f, 0.6143847f,
        0.49819162f, 0.99861586f, -0.040162664f, 0.61323756f, -3.4257555f, 0.12883468f, 0.71503806f,
        -0.00047083906f, -0.022116171f, 0.20287295f, 0.57808363f, 0.13447648f, -0.567981f,
            0.012870406f,
        0.11524569f, 0.15126163f, -0.13204178f, -0.15947475f, 0.07951494f, -0.017625058f,
            -0.7027437f,
        0.13393575f, 0.11820261f, -0.23517172f, -0.024454607f, 0.70421386f, 0.18630487f,
            -0.46858677f,
        -0.4683667f, -0.6562208f, 0.48709702f, 0.20935702f, -0.07026515f, 0.4290811f, -0.055457164f,
        -0.2367473f, 0.9031501f, -0.19488947f, 0.53575754f, 0.1454226f, 0.50798696f, 0.2741692f,
        -0.1092449f, 0.2431167f, -0.72585726f, 0.26891527f, -0.05429023f, 0.56069225f, 0.4604771f,
        0.027951943f, -0.13720979f, 0.33135137f, 0.058121487f, 0.38419637f, -0.2397815f, 0.8639751f,
        0.30370602f, 0.11486417f, 1.2583265f, -0.6868509f, -0.4427475f, -0.39219314f, 0.47792304f,
        -0.27135307f, 0.2382475f, -0.1996094f, 0.13824117f, 0.3820639f, -0.61511934f, 0.039813004f,
        0.47851738f, -0.50662553f, -0.16363265f, -0.4445863f, 0.21921895f, 0.48643264f,
            -0.40737042f,
        0.25020003f, 0.2335694f, 0.40993223f, 0.13403463f, -0.2985733f, 0.16600442f, -0.09267448f,
        0.19016545f, -0.3878531f, -0.41027692f, 0.57980746f, 2.9652934f, 0.526658f, 2.2490363f,
        -0.53969747f, -0.305595f, -0.074830405f, -0.50187737f, 0.5683324f, -0.22654122f, 0.2037428f,
        -0.18287599f, 0.36826897f, 0.18842699f, 0.4997174f, -0.15802714f, -0.08140944f, 0.44556466f,
        -0.9327764f, -0.36292362f, 0.42333403f, 0.47592965f, -0.48619512f, 0.083129644f,
            -0.3366479f,
        -0.15816651f, -0.2177555f, 0.14393292f, -0.58210063f, 0.23242788f, -0.92197245f,
            0.18356895f,
        0.14923067f, -0.31682768f, 0.12524123f, 0.009241004f, -0.12719649f, 0.3878747f, 4.17555f,
        0.42100364f, -0.14064603f, -0.48334855f, -0.014447036f, 0.2425102f, 0.3256095f, 0.19393544f,
        0.1449006f, 0.4528934f, 0.15562947f, 0.38725936f, 0.20109467f, -0.049756635f, 0.3189428f,
        0.17387456f, 0.51164156f, -0.0056554643f, 0.22957574f, -0.2129989f, 0.06481128f,
            0.10677868f,
        0.38537636f, -0.18115169f, -0.318631f, 0.4473375f, 0.5888031f, 0.21316051f, -0.054161776f,
        0.466791f, 0.2111727f, 4.861778f, -0.45711538f, 0.8164175f, -0.16577724f, -0.3993694f,
        0.09653682f, 0.4251573f, -0.33206543f, -0.9758614f, 0.055242226f, -0.6835603f, 0.20543319f,
        -0.7088398f, -0.27453008f, -0.18394795f, 0.16096875f, -0.377282f, -0.17395738f, 0.3672652f,
        -0.050255325f, 0.40476108f, 0.47854862f, -0.06963423f, -0.4356592f, -0.024380533f,
            0.5755641f,
        0.24321586f, 0.9868839f, -0.42375654f, 0.4033163f, 0.48404738f, -0.21295804f, -0.33429438f,
        0.67794275f, -1.0793577f, -0.29014733f, 0.43429956f, -0.044166815f, 0.14926112f,
            -0.43727002f,
        -0.3679548f, -0.2618187f, -0.38637984f, -0.42149296f, 1.012391f, 0.4610675f, 0.00081834354f,
        -0.8734115f, -0.5184589f, 0.3625249f, 0.90415674f, 0.22855447f, 1.100598f, -0.031182967f,
        0.8186242f, 0.037481993f, -0.051434793f, 0.799241f, 0.09376722f, -0.31054965f, 0.64474535f,
        0.17744642f, 0.047091328f, -0.0132923145f, 0.3278035f, -0.1482887f, 1.4148302f,
            -0.10155798f,
        0.19013874f, -0.6592334f, 0.017664954f, 0.6297756f, 0.44699794f, -0.38768283f, -0.22749634f,
        0.037469313f, 1.0035561f, -0.5621083f, 0.15439855f, -1.103763f, -0.1467406f, -0.20690262f,
        0.30828005f, -0.3038523f, 0.20509739f, 0.21344419f, 0.15029371f, 0.6413309f, 0.7803858f,
        0.1489292f, 0.8451711f, 0.19420576f, -0.1410484f, 0.07346665f, 0.039978452f, 0.4121644f,
        0.36646572f, 0.7973593f, 0.030420061f, 0.06697802f, -0.73158854f, 0.38371378f, -0.47764358f,
        0.27456418f, 0.17355308f, 0.08848218f, -0.019641347f, -0.23887624f, -0.24956176f,
            -0.60746604f,
        0.6779247f, 0.4817582f, -0.28018823f, 0.071450576f, -0.48186633f
      };

  // </editor-fold>
  // spotless:on

  public void testQuantizeForIndexMIP() {
    int dimensions = 768;

    BinaryQuantizer quantizer =
        new BinaryQuantizer(dimensions, VectorSimilarityFunction.MAXIMUM_INNER_PRODUCT);
    float[] vector = mipVectorToIndex;
    byte[] destination = new byte[dimensions / 8];
    float[] centroid = mipCentroid;
    float[] corrections = quantizer.quantizeForIndex(vector, destination, centroid);

    assertEquals(3, corrections.length);
    float ooq = corrections[0];
    float normOC = corrections[1];
    float oDotC = corrections[2];

    assertEquals(0.7882396f, ooq, 0.0000001f);
    assertEquals(5.0889387f, normOC, 0.000001f);
    assertEquals(131.48566f, oDotC, 0.0001f);
    assertArrayEquals(
        new byte[] {
          -88, -3, 60, -75, -38, 79, 84, -53, -116, -126, 19, -19, -21, -80, 69, 101, -71, 53, 101,
          -124, -24, -76, 92, -45, 108, -107, -18, 102, 23, -80, -47, 116, 87, -50, 27, -31, -10,
          -13, 117, -88, -27, -93, -98, -39, 30, -109, -114, 5, -15, 98, -82, 81, 83, 118, 30, -118,
          -12, -95, 121, 125, -13, -88, 75, -85, -56, -126, 82, -59, 48, -81, 67, -63, 81, 24, -83,
          95, -44, 103, 3, -40, -13, -41, -29, -60, 1, 65, -4, -110, -40, 34, 118, 51, -76, 75, 70,
          -51
        },
        destination);
  }

  public void testQuantizeForQueryMIP() {
      int dimensions = 768;

      BinaryQuantizer quantizer =
              new BinaryQuantizer(dimensions, VectorSimilarityFunction.MAXIMUM_INNER_PRODUCT);
      float[] vector = mipVectorToQuery;
      byte[] destination = new byte[dimensions / 8 * BQSpaceUtils.B_QUERY];
      float[] centroid = mipCentroid;
      float cDotC = 0;
      BinaryQuantizer.QueryFactors corrections =
              quantizer.quantizeForQuery(vector, destination, centroid, cDotC);

      int sumQ = corrections.quantizedSum();
      float lower = corrections.lower();
      float width = corrections.width();
      float normVmC = corrections.normVmC();
      float vDotC = corrections.vDotC();
      cDotC = corrections.cDotC();

      System.out.println(Arrays.toString(destination));
      assertEquals(4910, sumQ);
      assertEquals(-0.10079563f, lower, 0.00000001f);
      assertEquals(0.014609014f, width, 0.00000001f);
      assertEquals(9.766798f, normVmC, 0.000001f);
      assertEquals(133.56123f, vDotC, 0.0001f);
      assertEquals(132.20227f, cDotC, 0.0001f);
      assertArrayEquals(
              new byte[]{
                      63, -43, -39, -113, -106, -127, 77, -27, 86, -111, -89, -39, -17, -74, 42, -122, -24, -5,
                      88, 26, 89, 91, -103, -107, -58, -4, 69, -55, -99, -14, -104, 83, -90, -46, -92, 22, 28,
                      -85, 49, -54, -9, -97, 38, -81, 60, 110, 66, -42, 46, -107, -95, -72, -38, -115, 67, -74,
                      -67, -37, -99, 114, 35, -68, 64, 118, -50, 46, 53, -46, -90, 50, 46, 20, 121, -107, -44,
                      -54, -94, 6, 116, -84, 28, -18, -109, -124, -108, -103, -124, -106, 13, -76, -75, 4, -70,
                      -119, 123, -84, -77, -26, -34, 80, -102, 10, -43, 121, -13, 80, -36, -26, -6, 65, -126,
                      106, 116, -75, 77, 106, -19, 6, 38, -75, 2, -17, 119, 101, 7, -81, -28, -94, -71, 54, -43,
                      -88, -111, -95, -102, -57, 78, -66, -12, -20, 75, -104, -127, -116, 49, -72, 56, -99, 114,
                      38, 7, -2, -74, -43, 10, -78, -68, 72, 27, -88, -47, -107, 82, 78, 52, -2, -106, -112, 67,
                      24, 3, -30, -120, -48, -36, 60, -72, 42, -89, -86, -17, -100, 50, 84, 49, 117, 58, -109,
                      63, -45, -12, 8, -71, -8, 52, -100, -72, -20, 8, 109, 19, -103, -17, -5, -34, -26, 31, 42,
                      -123, -59, -20, 60, -33, 60, -24, -44, -81, 52, 122, 127, 63, -34, 123, -9, 59, -34, 74,
                      -29, -100, 2, -56, -97, -18, 11, -10, 127, 29, -38, 59, -52, 61, -86, 112, -28, -108, -90,
                      68, -2, 61, -97, 106, 114, -9, -8, 50, -18, -5, -40, 90, -37, 53, 32, 50, 112, 121, 23,
                      81, -16, 96, -102, -68, -67, -2, 45, -22, -34, -36, 84, -71, -47, 47, -1, -47, -10, -78,
                      -15, -91, -51, 70, 15, 67, 99, 71, 21, -93, -110, -20, 38, -112, 4, 1, 25, -32, -47, 26,
                      26, 18, -63, 0, -63, 18, 10, 80, 74, -123, 0, -64, 0, -128, 8, -60, 33, -71, 28, 98, -4,
                      53, 8, 17, -96, 9, 0, -30, 5, -108, 33, 66, 69, -106, 2, 73, 72, -72, 1, -64, 32, -107,
                      13, 8, 7, -19, 17, 0, 33, -91, 32, -54, -47, 73, 11, -124, -32, -82, 13, 21, 37, 3, 66, 1,
                      -47, 16, 1, 35, -94, 64, 99, -46, 1, 12, 65, 77, 14, 10, 18
              },
              destination);
  }
}
