/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.nio.file.Files;

apply plugin: 'java-library'

description = 'Analyzers for indexing content in different languages and domains'

dependencies {
  moduleApi project(':lucene:core')
  moduleTestImplementation project(':lucene:test-framework')
}

def checkoutDirProv = project.layout.buildDirectory.dir("hunspell-regressions")

// Fetch the data and enable regression tests against woorm/ libreoffice dictionaries.
def checkoutHunspellRegressionRepos = tasks.register("checkoutHunspellRegressionRepos", {
  outputs.dir(checkoutDirProv)
  outputs.upToDateWhen { false }

  doFirst {
    // Clone the repositories and refs we need.
    [
        "libreoffice": [
          "url": "https://github.com/LibreOffice/dictionaries",
          "ref": "master"
        ],
        "woorm": [
          "url": "https://github.com/wooorm/dictionaries",
          "ref": "main"
        ]
    ].each { name, repoSpec ->
      def url = repoSpec.url
      def ref = repoSpec.ref
      def cloneDir = checkoutDirProv.map { dir -> dir.dir(name) }.get().asFile.toPath()

      def logger = this.logger
      def gitExec = (List<String> cmdArgs) -> {
        logger.lifecycle("Executing git " + cmdArgs.join(" "))
        project.exec {
          executable "git"
          ignoreExitValue false
          workingDir cloneDir
          args = cmdArgs
        }
      }

      if (!Files.exists(cloneDir)) {
        Files.createDirectories(cloneDir);
        gitExec(["init", "--initial-branch", "irrelevant"])
        gitExec(["config", "advice.detachedHead", "false"])
        gitExec(["remote", "add", "origin", url])
      }

      gitExec(["fetch", "--depth", "1", "origin", ref])
      gitExec(["checkout", "FETCH_HEAD"])
    }
  }
})

tasks.register("testRegressions", Test, {
  group "Verification"
  description "Run Hunspell regression tests against Woorm/ LibreOffice git repositories."

  dependsOn checkoutHunspellRegressionRepos

  failFast = true
  include "**/TestAllDictionaries*"

  systemProperty "hunspell.dictionaries", checkoutDirProv.map { dir -> dir.asFile.absolutePath }.get()

  doFirst {
    logger.lifecycle("Running Hunspell regression tests...")
  }
})

// Pass all hunspell-tests-specific project properties to tests as system properties, if they're specified.
tasks.withType(Test).configureEach {
  [
      "hunspell.dictionaries",
      "hunspell.corpora",
      "hunspell.repo.path"
  ].each {
    def val = propertyOrDefault(it, null)
    if (val != null) {
      logger.lifecycle("Passing property: ${it}=${val}")
      systemProperty it, val
    }
  }
}
