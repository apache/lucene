/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.nio.charset.StandardCharsets
import java.nio.file.Files
import org.apache.lucene.gradle.plugins.gitinfo.GitInfoExtension
import org.apache.lucene.gradle.plugins.misc.QuietExec
import org.apache.lucene.gradle.plugins.publishing.ConfigureMavenPublishingPlugin

plugins {
  id 'signing'
}

// This project puts together the Lucene "distribution", assembling bits and pieces
// from across the project structure into release artifacts.

def releaseDir = project.layout.buildDirectory.dir("release")

// Collect git revision.
GitInfoExtension gitInfoExt = rootProject.extensions.getByName("gitinfo")
MapProperty<String, String> gitStatus = gitInfoExt.getGitInfo()
Provider<String> gitRev = gitStatus.getting("git.commit")

//
// Prepare the "source" distribution artifact. We use raw git export, no additional complexity needed.
//
Provider<RegularFile> sourceTgzFile = project.layout.buildDirectory.file("packages/lucene-${version}-src.tgz")
tasks.register("assembleSourceTgz", QuietExec, {
  description = "Assemble source Lucene artifact as a .tgz file."

  inputs.property("git-revision", gitRev)
  outputs.file sourceTgzFile

  executable = buildGlobals.externalTool("git")
  workingDir = project.rootDir

  // An explicit GIT_DIR to prevent .git upward scanning if something goes wrong.
  if (gitInfoExt.getDotGitDir().isPresent()) {
    environment("GIT_DIR", gitInfoExt.getDotGitDir().get().asFile.toString())
  } else {
    doFirst {
      throw new GradleException("Can't assemble source tgz without a full git clone.")
    }
  }

  args += [
    "archive",
    "--format",
    "tgz",
    "--prefix",
    "lucene-${version}/",
    "--output",
    sourceTgzFile.get().asFile,
    "HEAD"
  ]
})


//
// Prepare the "binary" distribution artifact.
//
def packageBaseName = project.layout.buildDirectory.dir("packages/lucene-${version}").get().asFile.toString()

// Prepare site documentation dependency for inclusion.
configurations {
  docs

  jars
  jarsTestFramework
  jarsThirdParty

  binaryDirForTests
}

dependencies {
  docs project(path: ':lucene:documentation', configuration: 'site')

  // Maven-published submodule JARs are part of the binary distribution.
  // We don't copy their transitive dependencies.
  def binaryModules = buildGlobals.publishedProjects.findAll {p ->
    !(p.path in [
      // Placed in a separate folder (module layer conflicts).
      ":lucene:test-framework",
    ])
  }
  for (Project module : binaryModules) {
    jars(module, {
      transitive = false
    })
  }

  // It's placed in a separate modules folder since it has service providers that are consumed by lucene-core for tests.
  // We won't resolve it when running the Luke app.
  jarsTestFramework(project(":lucene:test-framework"), {
    transitive = false
  })

  // The third-party JARs consist of all the transitive dependencies from a subset of
  // all Lucene modules. We only include the demos and Luke. Everything else has to be downloaded
  // manually or via maven POMs.
  for (Project module : [
        project(":lucene:luke"),
        project(":lucene:demo")
      ]) {
    jarsThirdParty(module, {
      transitive = true
    })
  }
}

def assembleBinaryTgz = tasks.register("assembleBinaryTgz", Tar, {
  description = "Assemble binary Lucene artifact as a .tgz file."

  archiveFileName = packageBaseName + ".tgz"
  destinationDirectory = file(archiveFileName).parentFile

  reproducibleFileOrder = true
  compression = Compression.GZIP

  // Internal archive folder for all files.
  into("lucene-${rootProject.version}/")
})

def binaryDestinationDir = file("${packageBaseName}-itests")
def assembleBinaryDirForTests = tasks.register("assembleBinaryDirForTests", Sync, {
  description = "Assemble a subset of the binary Lucene distribution as an expanded directory for tests."
  destinationDir = binaryDestinationDir
})

artifacts {
  binaryDirForTests binaryDestinationDir, {
    builtBy assembleBinaryDirForTests
  }
}

// Configure distribution content for archives and stand-alone directories.
// This is split into binaries and other artifacts to speed up distribution
// tests.
Action<AbstractCopyTask> distributionBinaryContent = { AbstractCopyTask task ->
  // Manually correct posix permissions (matters when assembling archives on Windows).
  task.filesMatching(["**/*.sh", "**/*.bat"]) {copy ->
    copy.permissions {
      unix("755")
    }
  }

  // Attach binary release - only files.
  task.from(file("src/binary-release"), {
    filteringCharset = 'UTF-8'
  })

  // Binary modules (Lucene).
  task.from(configurations.jars, {
    into 'modules'
  })
  task.from(configurations.jarsTestFramework, {
    into 'modules-test-framework'
  })

  // Binary modules (with dependencies). Don't duplicate project artifacts.
  task.from((configurations.jarsThirdParty - configurations.jars), {
    into 'modules-thirdparty'
  })
}

Action<Tar> distributionOtherContent = { Tar task ->
  // Cherry-pick certain files from the root.
  task.from(project(':').projectDir, {
    include "LICENSE.txt"
    include "NOTICE.txt"
  })

  // Cherry-pick certain files from the lucene module.
  task.from(project(':lucene').projectDir, {
    include "CHANGES.txt"
    include "JRE_VERSION_MIGRATION.md"
    include "MIGRATE.md"
    include "SYSTEM_REQUIREMENTS.md"
    include "licenses/*"
  })

  // The documentation.
  task.from(configurations.docs, {
    into 'docs'
  })
}

assembleBinaryTgz.configure(distributionBinaryContent)
assembleBinaryTgz.configure(distributionOtherContent)
assembleBinaryDirForTests.configure(distributionBinaryContent)


// Configure release artifact signing.
tasks.register("signReleaseArchives", Sign, {
  dependsOn tasks.assembleBinaryTgz
  sign tasks.assembleBinaryTgz

  // The source tgz is not an archive task so be explicit about the outputs to sign.
  dependsOn tasks.assembleSourceTgz
  sign sourceTgzFile.get().asFile
})

// Compute checksums for release archives.
tasks.register("computeChecksums", org.apache.lucene.gradle.Checksum, {
  files = objects.fileCollection()
  [
    tasks.assembleSourceTgz,
    tasks.assembleBinaryTgz,
  ].each {dep ->
    dependsOn dep
    files += dep.outputs.files
  }

  outputDir = project.layout.buildDirectory.dir("checksums").get().asFile
})

tasks.register("prepareGitRev", {
  Provider<RegularFile> outputFile = project.layout.buildDirectory.file(".gitrev")

  inputs.property("gitrev", gitRev)
  outputs.file(outputFile)

  doFirst {
    Files.writeString(outputFile.get().asFile.toPath(), gitRev.get(), StandardCharsets.UTF_8)
  }
})

// Set up the HTML-rendered "changes" distribution artifact by linking to documentation's output.
configurations {
  changesHtml
  mavenArtifacts
}

dependencies {
  changesHtml project(path: ":lucene:documentation", configuration: "changesHtml")
  mavenArtifacts project(path: ":", configuration: ConfigureMavenPublishingPlugin.MAVEN_ARTIFACTS_CONFIGURATION)
}

// Assemble everything needed in the release folder structure.
tasks.register("assembleRelease", Sync, {
  description = "Assemble all Lucene artifacts for a release."

  from(configurations.changesHtml, {
    into "changes"
  })

  from(configurations.mavenArtifacts, {
    into "maven"
  })

  from tasks.prepareGitRev
  from tasks.assembleSourceTgz
  from tasks.assembleBinaryTgz

  from tasks.computeChecksums

  // Conditionally, attach signatures of all the release archives.
  Provider<Boolean> signOption = rootProject.buildOptions.getOption(ConfigureMavenPublishingPlugin.OPT_SIGN)
      .asBooleanProvider()
  if (signOption.get()) {
    from tasks.signReleaseArchives
  }

  into releaseDir
})

// Add the description and task group to some of the tasks that make
// sense at the user-level help.
tasks.matching {
  it.name in [
    "assembleSourceTgz",
    "assembleBinaryTgz",
    "assembleRelease",
  ]
}.configureEach {
  group = "distribution"
}
