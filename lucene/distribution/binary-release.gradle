/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


// Configure Lucene's binary release. This is a bit convoluted so is placed
// in a separate script.

configure(project(":lucene:distribution")) {
  def packageBaseName = "${buildDir}/packages/lucene-${version}"

  // All the maven-published projects are part of the binary distribution.
  def includeInBinaries = rootProject.ext.mavenProjects

  // Legacy binary distribution contains Lucene artifacts (JARs) and their dependencies
  // under 'lib/'. We have to go through some hoops to split the artifact from all of its
  // transitive dependencies and separate their output location.
  def moduleArtifactConfigurations = []
  for (Project module : includeInBinaries) {
    def binaryArtifactsConfiguration = configurations.create("binary-artifacts" + module.path.replace(':', '-'))

    dependencies { DependencyHandler handler ->
      handler.add(binaryArtifactsConfiguration.name, project(path: module.path, configuration: "binaryArtifacts"))
    }

    moduleArtifactConfigurations += [
        "module": module,
        "binaryArtifactsConfiguration": binaryArtifactsConfiguration
    ]
  }


  // Prepare site documentation dependency for inclusion.
  configurations {
    docs
  }

  dependencies {
    docs project(path: ':lucene:documentation', configuration: 'site')
  }


  // Distribution package (zip/tgz) content is the same so use the same closure to configure both tasks.
  Closure<Void> distributionContent = { AbstractCopyTask task ->
    // Manually correct posix permissions (matters when assembling archives on Windows).
    filesMatching(["**/*.sh", "**/*.bat"]) { copy ->
      copy.setMode(0755)
    }

    // Attach binary release exclusive files.
    from(file("src/binary-release"), {
    })

    // Cherry-pick certain files from the root.
    from(project(':').projectDir, {
        include "LICENSE.txt"
        include "NOTICE.txt"
    })

    // Cherry-pick certain files from the lucene module.
    from(project(':lucene').projectDir, {
      include "CHANGES.txt"
      include "JRE_VERSION_MIGRATION.md"
      include "MIGRATE.md"
      include "SYSTEM_REQUIREMENTS.md"

      include "licenses/*"
    })

    // The documentation.
    from(configurations.docs, {
      into 'docs'
    })

    // Each module's binary artifacts and their dependencies.
    moduleArtifactConfigurations.each {
      def toPath = it.module.path.replaceFirst("^:lucene:", "").replace(':', '/')

      task.from(it.binaryArtifactsConfiguration, {
        into toPath
      })
    }

    // Internal archive folder for all files.
    into "lucene-${rootProject.version}/"
  }

  // Assemble distribution archives
  task assembleBinaryZip(type: Zip) {
    description "Assemble binary Lucene artifact as a .zip file."

    archiveFileName = packageBaseName + ".zip"
    destinationDirectory = file(archiveFileName).parentFile

    metadataCharset = "UTF-8"
    reproducibleFileOrder = true
  }

  task assembleBinaryTgz(type: Tar) {
    description "Assemble binary Lucene artifact as a .tgz file."

    archiveFileName = packageBaseName + ".tgz"
    destinationDirectory = file(archiveFileName).parentFile

    reproducibleFileOrder = true
    compression = Compression.GZIP
  }

  // Apply the content configuration.
  [tasks.assembleBinaryZip, tasks.assembleBinaryTgz].each { Task task ->
    task.configure distributionContent
  }
}
