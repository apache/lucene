/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Try to detect IntelliJ model loader project structure "sync"
//
rootProject.ext.isIdea = Boolean.parseBoolean(System.getProperty("idea.active", "false"))
rootProject.ext.isIdeaSync = Boolean.parseBoolean(System.getProperty("idea.sync.active", "false"))
rootProject.ext.isIdeaBuild = (isIdea && !isIdeaSync)

if (isIdea) {
  logger.warn("IntelliJ Idea IDE detected.")

  allprojects {
    apply plugin: 'idea'

    idea {
      module {
        outputDir file('build/idea/classes/main')
        testOutputDir file('build/idea/classes/test')
        downloadSources = true
      }
    }
  }
}

if (isIdeaBuild) {
  // Skip certain long tasks that are dependencies
  // of 'assemble' if we're building from within IntelliJ.
  gradle.taskGraph.whenReady { taskGraph ->
    def tasks = taskGraph.getAllTasks()

    def skipTasks = [
            // Skip site javadoc rendering
            ".*:(renderSiteJavadoc)",
    ]

    logger.lifecycle("Skipping certain tasks on IntelliJ builds")
    tasks.each { task ->
      def taskPath = task.path
      if (skipTasks.any { pattern -> taskPath ==~ pattern }) {
        logger.debug("Skipping task on IntelliJ: " + taskPath)
        task.enabled = false
      }
    }
  }
}
