/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

def resources = scriptResources(buildscript)

configure(project(':lucene:documentation')) {
  task checkBrokenLinks(type: CheckBrokenLinksTask) {
    group 'Verification'
    description 'Check broken links in the entire documentation'
    dependsOn 'documentation'

    validationScript = file("${resources}/checkJavadocLinks.py")
    docsDir.fileProvider(provider { -> file(project.docroot) })
    output = project.file("${buildDir}/check-broken-links-output.txt")
  }

  check.dependsOn checkBrokenLinks
}

@CacheableTask
class CheckBrokenLinksTask extends DefaultTask {
  // wraps input directory location in DirectoryProperty so as to lazily evaluate 'docroot' property
  // (see gradle/documentation/documentation.gradle)
  @InputDirectory
  @PathSensitive(PathSensitivity.RELATIVE)
  @IgnoreEmptyDirectories
  final DirectoryProperty docsDir = project.objects.directoryProperty()

  @InputFile
  @PathSensitive(PathSensitivity.RELATIVE)
  File validationScript

  @OutputFile
  File output

  @TaskAction
  def check() {
    project.quietExec {
      executable project.externalTool("python3")
      ignoreExitValue = false
      args = [
        "-B",
        validationScript.absolutePath,
        docsDir.get().getAsFile()
      ]
    }
  }
}
