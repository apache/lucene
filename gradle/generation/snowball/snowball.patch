diff --git a/compiler/generator_java.c b/compiler/generator_java.c
index 2958452..c254dbe 100644
--- a/compiler/generator_java.c
+++ b/compiler/generator_java.c
@@ -272,7 +272,7 @@ static void generate_AE(struct generator * g, struct node * p) {
             break;
         case c_len: /* Same as size() for Java. */
         case c_size:
-            w(g, "current.length()");
+            w(g, "limit");
             break;
     }
 }
@@ -941,9 +941,12 @@ static void generate_define(struct generator * g, struct node * p) {
      * be required to allow the SnowballProgram base class to invoke them.
      * FIXME: Is this avoidable?
      */
-    if (q->type == t_routine && !q->used_in_among) {
+    if (q->used_in_among) {
+        g->S[0] = "public";
+    } else if (q->type == t_routine) {
         g->S[0] = "private";
     } else {
+        w(g, "~N~M@Override");
         g->S[0] = "public";
     }
     g->V[0] = q;
@@ -1140,6 +1143,7 @@ static void generate_class_begin(struct generator * g) {
     w(g, " {~+~N"
          "~N"
          "~Mprivate static final long serialVersionUID = 1L;~N"
+         "~Mprivate static final java.lang.invoke.MethodHandles.Lookup methodObject = java.lang.invoke.MethodHandles.lookup();~N"
          "~N");
 }
 
@@ -1186,7 +1190,7 @@ static void generate_among_table(struct generator * g, struct among * x) {
             if (v->function != 0) {
                 w(g, ", \"");
                 write_varname(g, v->function);
-                w(g, "\", ~n.class");
+                w(g, "\", methodObject");
             }
             w(g, ")~S0~N");
             v++;
diff --git a/java/org/tartarus/snowball/Among.java b/java/org/tartarus/snowball/Among.java
index 8261503..abb8685 100644
--- a/java/org/tartarus/snowball/Among.java
+++ b/java/org/tartarus/snowball/Among.java
@@ -1,7 +1,13 @@
 package org.tartarus.snowball;
 
-import java.lang.reflect.Method;
+import java.lang.invoke.MethodHandle;
+import java.lang.invoke.MethodHandles;
+import java.lang.invoke.MethodType;
+import java.util.Locale;
 
+/**
+ * Internal class used by Snowball stemmers
+ */
 public class Among {
     public Among (String s, int substring_i, int result) {
         this.s = s.toCharArray();
@@ -11,19 +17,30 @@ public class Among {
     }
 
     public Among (String s, int substring_i, int result, String methodname,
-		  Class<? extends SnowballProgram> programclass) {
+		  MethodHandles.Lookup methodobject) {
         this.s = s.toCharArray();
         this.substring_i = substring_i;
 	this.result = result;
-	try {
-	    this.method = programclass.getDeclaredMethod(methodname);
-	} catch (NoSuchMethodException e) {
-	    throw new RuntimeException(e);
-	}
+	final Class<? extends SnowballProgram> clazz = methodobject.lookupClass().asSubclass(SnowballProgram.class);
+	if (methodname.length() > 0) {
+	    try {
+	        this.method = methodobject.findVirtual(clazz, methodname, MethodType.methodType(boolean.class))
+	            .asType(MethodType.methodType(boolean.class, SnowballProgram.class));
+	    } catch (NoSuchMethodException | IllegalAccessException e) {
+	        throw new RuntimeException(String.format(Locale.ENGLISH,
+	            "Snowball program '%s' is broken, cannot access method: boolean %s()",
+	            clazz.getSimpleName(), methodname
+	        ), e);
+	    }
+	} else {
+	    this.method = null;
+        }
     }
 
-    public final char[] s; /* search string */
-    public final int substring_i; /* index to longest matching substring */
-    public final int result; /* result of the lookup */
-    public final Method method; /* method to use if substring matches */
+    final char[] s; /* search string */
+    final int substring_i; /* index to longest matching substring */
+    final int result; /* result of the lookup */
+
+    // Make sure this is not accessible outside package for Java security reasons!
+    final MethodHandle method; /* method to use if substring matches */
 };
diff --git a/java/org/tartarus/snowball/SnowballProgram.java b/java/org/tartarus/snowball/SnowballProgram.java
index 1b27b96..94f2d4b 100644
--- a/java/org/tartarus/snowball/SnowballProgram.java
+++ b/java/org/tartarus/snowball/SnowballProgram.java
@@ -1,50 +1,84 @@
 
 package org.tartarus.snowball;
-import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.UndeclaredThrowableException;
 import java.io.Serializable;
 
+/**
+ * Base class for a snowball stemmer
+ */
 public class SnowballProgram implements Serializable {
     protected SnowballProgram()
     {
-	current = new StringBuilder();
-	init();
+	current = new char[8];
+	setCurrent("");
     }
 
     static final long serialVersionUID = 2016072500L;
 
-    private void init() {
+    /**
+     * Set the current string.
+     */
+    public void setCurrent(String value)
+    {
+	current = value.toCharArray();
 	cursor = 0;
-	limit = current.length();
+	limit = value.length();
 	limit_backward = 0;
 	bra = cursor;
 	ket = limit;
     }
 
     /**
-     * Set the current string.
+     * Get the current string.
      */
-    public void setCurrent(String value)
+    public String getCurrent()
     {
-        // Make a new StringBuilder.  If we reuse the old one, and a user of
-        // the library keeps a reference to the buffer returned (for example,
-        // by converting it to a String in a way which doesn't force a copy),
-        // the buffer size will not decrease, and we will risk wasting a large
-        // amount of memory.
-        // Thanks to Wolfram Esser for spotting this problem.
-        current = new StringBuilder(value);
-	init();
+        return new String(current, 0, limit);
     }
 
     /**
-     * Get the current string.
+     * Set the current string.
+     * @param text character array containing input
+     * @param length valid length of text.
      */
-    public String getCurrent()
-    {
-        return current.toString();
+    public void setCurrent(char[] text, int length) {
+        current = text;
+        cursor = 0;
+        limit = length;
+        limit_backward = 0;
+        bra = cursor;
+        ket = limit;
+    }
+
+    /**
+     * Get the current buffer containing the stem.
+     * <p>
+     * NOTE: this may be a reference to a different character array than the
+     * one originally provided with setCurrent, in the exceptional case that
+     * stemming produced a longer intermediate or result string.
+     * </p>
+     * <p>
+     * It is necessary to use {@link #getCurrentBufferLength()} to determine
+     * the valid length of the returned buffer. For example, many words are
+     * stemmed simply by subtracting from the length to remove suffixes.
+     * </p>
+     * @see #getCurrentBufferLength()
+     */
+    public char[] getCurrentBuffer() {
+        return current;
+    }
+
+    /**
+     * Get the valid length of the character array in
+     * {@link #getCurrentBuffer()}.
+     * @return valid length of the array.
+     */
+    public int getCurrentBufferLength() {
+        return limit;
     }
 
     // current string
-    protected StringBuilder current;
+    private char[] current;
 
     protected int cursor;
     protected int limit;
@@ -74,7 +108,7 @@ public class SnowballProgram implements Serializable {
     protected boolean in_grouping(char [] s, int min, int max)
     {
 	if (cursor >= limit) return false;
-	char ch = current.charAt(cursor);
+	char ch = current[cursor];
 	if (ch > max || ch < min) return false;
 	ch -= min;
 	if ((s[ch >> 3] & (0X1 << (ch & 0X7))) == 0) return false;
@@ -85,7 +119,7 @@ public class SnowballProgram implements Serializable {
     protected boolean in_grouping_b(char [] s, int min, int max)
     {
 	if (cursor <= limit_backward) return false;
-	char ch = current.charAt(cursor - 1);
+	char ch = current[cursor - 1];
 	if (ch > max || ch < min) return false;
 	ch -= min;
 	if ((s[ch >> 3] & (0X1 << (ch & 0X7))) == 0) return false;
@@ -96,7 +130,7 @@ public class SnowballProgram implements Serializable {
     protected boolean out_grouping(char [] s, int min, int max)
     {
 	if (cursor >= limit) return false;
-	char ch = current.charAt(cursor);
+	char ch = current[cursor];
 	if (ch > max || ch < min) {
 	    cursor++;
 	    return true;
@@ -112,7 +146,7 @@ public class SnowballProgram implements Serializable {
     protected boolean out_grouping_b(char [] s, int min, int max)
     {
 	if (cursor <= limit_backward) return false;
-	char ch = current.charAt(cursor - 1);
+	char ch = current[cursor - 1];
 	if (ch > max || ch < min) {
 	    cursor--;
 	    return true;
@@ -130,7 +164,7 @@ public class SnowballProgram implements Serializable {
 	if (limit - cursor < s.length()) return false;
 	int i;
 	for (i = 0; i != s.length(); i++) {
-	    if (current.charAt(cursor + i) != s.charAt(i)) return false;
+	    if (current[cursor + i] != s.charAt(i)) return false;
 	}
 	cursor += s.length();
 	return true;
@@ -141,7 +175,7 @@ public class SnowballProgram implements Serializable {
 	if (cursor - limit_backward < s.length()) return false;
 	int i;
 	for (i = 0; i != s.length(); i++) {
-	    if (current.charAt(cursor - s.length() + i) != s.charAt(i)) return false;
+	    if (current[cursor - s.length() + i] != s.charAt(i)) return false;
 	}
 	cursor -= s.length();
 	return true;
@@ -171,7 +205,7 @@ public class SnowballProgram implements Serializable {
 		    diff = -1;
 		    break;
 		}
-		diff = current.charAt(c + common) - w.s[i2];
+		diff = current[c + common] - w.s[i2];
 		if (diff != 0) break;
 		common++;
 	    }
@@ -199,16 +233,13 @@ public class SnowballProgram implements Serializable {
 	    if (common_i >= w.s.length) {
 		cursor = c + w.s.length;
 		if (w.method == null) return w.result;
-		boolean res;
+		boolean res = false;
 		try {
-		    Object resobj = w.method.invoke(this);
-		    res = resobj.toString().equals("true");
-		} catch (InvocationTargetException e) {
-		    res = false;
-		    // FIXME - debug message
-		} catch (IllegalAccessException e) {
-		    res = false;
-		    // FIXME - debug message
+		    res = (boolean) w.method.invokeExact(this);
+		} catch (Error | RuntimeException e) {
+		    throw e;
+		} catch (Throwable e) {
+		    throw new UndeclaredThrowableException(e);
 		}
 		cursor = c + w.s.length;
 		if (res) return w.result;
@@ -243,7 +274,7 @@ public class SnowballProgram implements Serializable {
 		    diff = -1;
 		    break;
 		}
-		diff = current.charAt(c - 1 - common) - w.s[i2];
+		diff = current[c - 1 - common] - w.s[i2];
 		if (diff != 0) break;
 		common++;
 	    }
@@ -267,16 +298,13 @@ public class SnowballProgram implements Serializable {
 		cursor = c - w.s.length;
 		if (w.method == null) return w.result;
 
-		boolean res;
+		boolean res = false;
 		try {
-		    Object resobj = w.method.invoke(this);
-		    res = resobj.toString().equals("true");
-		} catch (InvocationTargetException e) {
-		    res = false;
-		    // FIXME - debug message
-		} catch (IllegalAccessException e) {
-		    res = false;
-		    // FIXME - debug message
+		    res = (boolean) w.method.invokeExact(this);
+		} catch (Error | RuntimeException e) {
+		    throw e;
+		} catch (Throwable e) {
+		    throw new UndeclaredThrowableException(e);
 		}
 		cursor = c - w.s.length;
 		if (res) return w.result;
@@ -286,13 +314,41 @@ public class SnowballProgram implements Serializable {
 	}
     }
 
+    // mini version of ArrayUtil.oversize from lucene, specialized to chars
+    static int oversize(int minTargetSize) {
+	int extra = minTargetSize >> 3;
+	if (extra < 3) {
+	    extra = 3;
+	}
+	int newSize = minTargetSize + extra;
+	return (newSize + 3) & 0x7ffffffc;
+    }
+
     /* to replace chars between c_bra and c_ket in current by the
      * chars in s.
      */
-    protected int replace_s(int c_bra, int c_ket, String s)
+    protected int replace_s(int c_bra, int c_ket, CharSequence s)
     {
-	int adjustment = s.length() - (c_ket - c_bra);
-	current.replace(c_bra, c_ket, s);
+	final int adjustment = s.length() - (c_ket - c_bra);
+	final int newLength = limit + adjustment;
+	//resize if necessary
+	if (newLength > current.length) {
+	    char[] newBuffer = new char[oversize(newLength)];
+	    System.arraycopy(current, 0, newBuffer, 0, limit);
+	    current = newBuffer;
+	}
+	// if the substring being replaced is longer or shorter than the
+	// replacement, need to shift things around
+	if (adjustment != 0 && c_ket < limit) {
+	    System.arraycopy(current, c_ket, current, c_bra + s.length(),
+	        limit - c_ket);
+	}
+	// insert the replacement text
+	// Note, faster is s.getChars(0, s.length(), current, c_bra);
+	// but would have to duplicate this method for both String and StringBuilder
+	for (int i = 0; i < s.length(); i++)
+	    current[c_bra + i] = s.charAt(i);
+
 	limit += adjustment;
 	if (cursor >= c_ket) cursor += adjustment;
 	else if (cursor > c_bra) cursor = c_bra;
@@ -303,57 +359,43 @@ public class SnowballProgram implements Serializable {
     {
 	if (bra < 0 ||
 	    bra > ket ||
-	    ket > limit ||
-	    limit > current.length())   // this line could be removed
+	    ket > limit)
 	{
-	    System.err.println("faulty slice operation");
-	// FIXME: report error somehow.
-	/*
-	    fprintf(stderr, "faulty slice operation:\n");
-	    debug(z, -1, 0);
-	    exit(1);
-	    */
+	     throw new IllegalArgumentException("faulty slice operation: bra=" + bra + ",ket=" + ket + ",limit=" + limit);
 	}
     }
 
-    protected void slice_from(String s)
+    protected void slice_from(CharSequence s)
     {
 	slice_check();
 	replace_s(bra, ket, s);
     }
 
-    protected void slice_from(CharSequence s)
-    {
-        slice_from(s.toString());
-    }
-
     protected void slice_del()
     {
 	slice_from("");
     }
 
-    protected void insert(int c_bra, int c_ket, String s)
+    protected void insert(int c_bra, int c_ket, CharSequence s)
     {
 	int adjustment = replace_s(c_bra, c_ket, s);
 	if (c_bra <= bra) bra += adjustment;
 	if (c_bra <= ket) ket += adjustment;
     }
 
-    protected void insert(int c_bra, int c_ket, CharSequence s)
-    {
-	insert(c_bra, c_ket, s.toString());
-    }
-
     /* Copy the slice into the supplied StringBuilder */
     protected void slice_to(StringBuilder s)
     {
 	slice_check();
-	s.replace(0, s.length(), current.substring(bra, ket));
+	int len = ket - bra;
+	s.setLength(0);
+	s.append(current, bra, len);
     }
 
     protected void assign_to(StringBuilder s)
     {
-	s.replace(0, s.length(), current.substring(0, limit));
+	s.setLength(0);
+	s.append(current, 0, limit);
     }
 
 /*
diff --git a/java/org/tartarus/snowball/SnowballStemmer.java b/java/org/tartarus/snowball/SnowballStemmer.java
index 73a81a9..f7772d3 100644
--- a/java/org/tartarus/snowball/SnowballStemmer.java
+++ b/java/org/tartarus/snowball/SnowballStemmer.java
@@ -1,6 +1,9 @@
 
 package org.tartarus.snowball;
 
+/**
+ * Parent class of all snowball stemmers, which must implement <code>stem</code>
+ */
 public abstract class SnowballStemmer extends SnowballProgram {
     public abstract boolean stem();
 
diff --git a/libstemmer/modules.txt b/libstemmer/modules.txt
index cd36a21..5f51287 100644
--- a/libstemmer/modules.txt
+++ b/libstemmer/modules.txt
@@ -53,9 +53,9 @@ porter          UTF_8,ISO_8859_1        porter			english
 # algorithms are:
 #
 # kraaij_pohlmann  - This is a different dutch stemmer.
-#kraaij_pohlmann  UTF_8,ISO_8859_1        kraaij_pohlmann	dutch
+kraaij_pohlmann  UTF_8,ISO_8859_1        kraaij_pohlmann	dutch
 #
 # lovins           - This is an english stemmer, but fairly outdated, and
 #                    only really applicable to a restricted type of input text
 #                    (keywords in academic publications).
-#lovins           UTF_8,ISO_8859_1        lovins		english
+lovins           UTF_8,ISO_8859_1        lovins		english
