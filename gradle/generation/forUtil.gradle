/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Regenerates "ForUtil.java" code used by codecs.

configure(project(":lucene:core")) {

  task generateForUtilInternal() {
    description "Regenerate gen_ForUtil.py"
    group "generation"

    def genDir = file("src/java/org/apache/lucene/codecs/lucene90")
    def genScript = file("${genDir}/gen_ForUtil.py")
    def genOutput = file("${genDir}/ForUtil.java")

    inputs.file genScript
    outputs.file genOutput

    doLast {
      quietExec {
        workingDir genDir
        executable project.externalTool("python3")
        args = [ '-B', genScript ]
      }
    }
  }

  regenerate.dependsOn wrapWithPersistentChecksums(generateForUtilInternal, [ andThenTasks: ["spotlessJava", "spotlessJavaApply"] ])
}

configure(project(":lucene:backward-codecs")) {

  task generateForUtilInternal() {
    description "Regenerate gen_ForUtil.py"
    group "generation"

    def genDir = file("src/java/org/apache/lucene/backward_codecs/lucene84")
    def genScript = file("${genDir}/gen_ForUtil.py")
    def genOutput = file("${genDir}/ForUtil.java")

    inputs.file genScript
    outputs.file genOutput

    doLast {
      quietExec {
        workingDir genDir
        executable project.externalTool("python3")
        args = [ '-B', genScript ]
      }
    }
  }

  regenerate.dependsOn wrapWithPersistentChecksums(generateForUtilInternal, [ andThenTasks: ["spotlessJava", "spotlessJavaApply"] ])
}

