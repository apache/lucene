/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// LUCENE-9861: tune JVM options for short-lived java subprocesses.
allprojects {
    def vmOpts = [
        '-XX:+UseParallelGC',
        '-XX:TieredStopAtLevel=1',
        '-XX:ActiveProcessorCount=1'
    ]

    // Inject vm options into custom javadoc rendering. We can't refer
    // to the task type because it's dynamic.
    tasks.matching { it.name in ["renderJavadoc", "renderSiteJavadoc"] }.all {
        extraOpts.addAll(vmOpts.collect {"-J" + it})
    }

    // Inject vm options into any JavaExec task... We could narrow it
    // down but I don't think there is any harm in keeping it broad.
    tasks.withType(JavaExec) { task ->
        // Skip tuning java exec for benchmarks.
        if (task.path == ":lucene:benchmark:run") {
            return
        }

        jvmArgs += vmOpts
    }

    // Tweak javac to not be too resource-hungry.
    // This applies to any JVM when javac runs forked (e.g. error-prone)
    // Avoiding the fork entirely is best.
    tasks.withType(JavaCompile) { JavaCompile task ->
        task.options.forkOptions.jvmArgumentProviders.add(new CommandLineArgumentProvider() {
            @Override
            Iterable<String> asArguments() {
                // Gradle bug: https://github.com/gradle/gradle/issues/22746
                //
                // Evaluation of this block is delayed until execution time when
                // we know which "mode" java compiler task will pick and can set arguments
                // accordingly.
                //
                // There is a side-effect to this that arguments passed via the provider
                // are not part of up-to-date checks but these are internal JVM flags so we
                // don't care.
                //
                // Pass VM options via -J only with a custom javaHome AND when java toolchains are not used.
                if (task.options.forkOptions.javaHome != null && task.javaCompiler.getOrNull() == null) {
                    return vmOpts.collect {"-J" + it}
                } else {
                    return vmOpts
                }
            }
        })
    }
}
