/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// LUCENE-9861: tune JVM options for short-lived java subprocesses.
allprojects {
    def vmOpts = [
        '-XX:+UseParallelGC',
        '-XX:TieredStopAtLevel=1'
    ]

    // Inject vm options into custom javadoc rendering. We can't refer
    // to the task type because it's dynamic.
    tasks.matching { it.name in ["renderJavadoc", "renderSiteJavadoc"] }.all {
        extraOpts.addAll(vmOpts.collect {"-J" + it})
    }

    // Inject vm options into any JavaExec task... We could narrow it
    // down but I don't think there is any harm in keeping it broad.
    tasks.withType(JavaExec) { task ->
        // Skip tuning java exec for benchmarks.
        if (task.path == ":lucene:benchmark:run") {
            return
        }

        jvmArgs += vmOpts
    }

    // Tweak javac to not be too resource-hungry. Note that
    // java compile can run in-process with gradle; if this is the case then
    // no jvmArgs are passed. We can force javac to run as a forked process but
    // I don't know if it makes sense in all circumstances.
    tasks.withType(JavaCompile) { JavaCompile task ->
        // The 'non-forked' version of 'gradlew clean classes' runs in 15s for me,
        // while forcing fork = true below completes in 22s.
        //
        // task.options.fork = true
        task.options.forkOptions.jvmArgs += vmOpts
        task.options.forkOptions.jvmArgs += [
            "-XX:+PrintFlagsFinal",
            "-XX:ActiveProcessorCount=1"
        ]
    }
}