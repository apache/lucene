/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.apache.lucene.gradle.modules.ModularPathsExtension;

// Configure miscellaneous aspects required for supporting the java module system layer.

// Debugging utilities.
apply from: buildscript.sourceFile.toPath().resolveSibling("modules-debugging.gradle")

allprojects {
  plugins.withType(JavaPlugin) {
    // We won't be using gradle's built-in automatic module finder.
    java {
      modularity.inferModulePath.set(false)
    }

    //
    // Configure modular extensions for each source set.
    //
    project.sourceSets.all { SourceSet sourceSet ->
      // Create and register a source set extension for manipulating classpath/ module-path
      ModularPathsExtension modularPaths = new ModularPathsExtension(project, sourceSet)
      sourceSet.extensions.add("modularPaths", modularPaths)

      // LUCENE-10344: We have to provide a special-case extension for ECJ because it does not
      // support all of the module-specific javac options.
      ModularPathsExtension modularPathsForEcj = modularPaths
      if (sourceSet.name == SourceSet.TEST_SOURCE_SET_NAME && project.path in [
          ":lucene:spatial-extras",
          ":lucene:spatial3d",
      ]) {
        modularPathsForEcj = modularPaths.cloneWithMode(ModularPathsExtension.Mode.CLASSPATH_ONLY)
      }
      sourceSet.extensions.add("modularPathsForEcj", modularPathsForEcj)

      // TODO: the tests of these projects currently don't compile or work in
      // module-path mode. Make the modular paths extension use class path only.
      if (sourceSet.name == SourceSet.TEST_SOURCE_SET_NAME && project.path in [
        // Circular dependency between artifacts or source set outputs,
        // causing package split issues at runtime.
        ":lucene:core",
        ":lucene:codecs",
        ":lucene:test-framework",
      ]) {
        modularPaths.mode = ModularPathsExtension.Mode.CLASSPATH_ONLY
      }

      // Configure the JavaCompile task associated with this source set.
      tasks.named(sourceSet.getCompileJavaTaskName()).configure({ JavaCompile task ->
        task.dependsOn modularPaths.compileModulePathConfiguration

        // LUCENE-10327: don't allow gradle to emit an empty sourcepath as it would break
        // compilation of modules.
        task.options.setSourcepath(sourceSet.java.sourceDirectories)

        // Add modular dependencies and their transitive dependencies to module path.
        task.options.compilerArgumentProviders.add(modularPaths.compilationArguments)

        // LUCENE-10304: if we modify the classpath here, IntelliJ no longer sees the dependencies as compile-time
        // dependencies, don't know why.
        if (!rootProject.ext.isIdea) {
          task.classpath = modularPaths.compilationClasspath
        }

        doFirst {
          modularPaths.logCompilationPaths(logger)
        }
      })

      // For source sets that contain a module descriptor, configure a jar task that combines
      // classes and resources into a single module.
      if (sourceSet.name != SourceSet.MAIN_SOURCE_SET_NAME) {
        tasks.maybeCreate(sourceSet.getJarTaskName(), org.gradle.jvm.tasks.Jar).configure({
          archiveClassifier = sourceSet.name
          from(sourceSet.output)
        })
      }
    }

    // Connect modular configurations between their "test" and "main" source sets, this reflects
    // the conventions set by the Java plugin.
    project.configurations {
      moduleTestApi.extendsFrom moduleApi
      moduleTestImplementation.extendsFrom moduleImplementation
      moduleTestRuntimeOnly.extendsFrom moduleRuntimeOnly
      moduleTestCompileOnly.extendsFrom moduleCompileOnly
    }

    // Gradle's java plugin sets the compile and runtime classpath to be a combination
    // of configuration dependencies and source set's outputs. For source sets with modules,
    // this leads to split class and resource folders.
    //
    // We tweak the default source set path configurations here by assembling jar task outputs
    // of the respective source set, instead of their source set output folders. We also attach
    // the main source set's jar to the modular test implementation configuration.
    SourceSet mainSourceSet = project.sourceSets.getByName(SourceSet.MAIN_SOURCE_SET_NAME)
    boolean mainIsModular = mainSourceSet.modularPaths.hasModuleDescriptor()
    boolean mainIsEmpty = mainSourceSet.allJava.isEmpty()
    SourceSet testSourceSet = project.sourceSets.getByName(SourceSet.TEST_SOURCE_SET_NAME)
    boolean testIsModular = testSourceSet.modularPaths.hasModuleDescriptor()

    // LUCENE-10304: if we modify the classpath here, IntelliJ no longer sees the dependencies as compile-time
    // dependencies, don't know why.
    if (!rootProject.ext.isIdea) {
      def jarTask = project.tasks.getByName(mainSourceSet.getJarTaskName())
      def testJarTask = project.tasks.getByName(testSourceSet.getJarTaskName())

      // Consider various combinations of module/classpath configuration between the main and test source set.
      if (testIsModular) {
        if (mainIsModular || mainIsEmpty) {
          // If the main source set is empty, skip the jar task.
          def jarTaskOutputs = mainIsEmpty ? [] :  jarTask.outputs

          // Fully modular tests - must have no split packages, proper access, etc.
          // Work around the split classes/resources problem by adjusting classpaths to
          // rely on JARs rather than source set output folders.
          testSourceSet.compileClasspath = project.objects.fileCollection().from(
              jarTaskOutputs,
              project.configurations.getByName(testSourceSet.getCompileClasspathConfigurationName()),
          )
          testSourceSet.runtimeClasspath = project.objects.fileCollection().from(
              jarTaskOutputs,
              testJarTask.outputs,
              project.configurations.getByName(testSourceSet.getRuntimeClasspathConfigurationName()),
          )

          project.dependencies {
            moduleTestImplementation files(jarTaskOutputs)
            moduleTestRuntimeOnly files(testJarTask.outputs)
          }
        } else {
          // This combination simply does not make any sense (in my opinion).
          throw GradleException("Test source set is modular and main source set is class-based, this makes no sense: " + project.path)
        }
      } else {
        if (mainIsModular) {
          // This combination is a potential candidate for patching the main sourceset's module with test classes. I could
          // not resolve all the difficulties that arise when you try to do it though:
          // - either a separate module descriptor is needed that opens test packages, adds dependencies via requires clauses
          // or a series of jvm arguments (--add-reads, --add-opens, etc.) has to be generated and maintained. This is
          // very low-level (ECJ doesn't support a full set of these instructions, for example).
          //
          // Fall back to classpath mode.
        } else {
          // This is the 'plain old classpath' mode: neither the main source set nor the test set are modular.
        }
      }
    }

    //
    // Configures a Test task associated with the provided source set to use module paths.
    //
    // There is no explicit connection between source sets and test tasks so there is no way (?)
    // to do this automatically, convention-style.
    //
    // This closure can be used to configure a different task, with a different source set, should we
    // have the need for it.
    Closure<Void> configureTestTaskForSourceSet = { Test task, SourceSet sourceSet ->
      task.configure {
        ModularPathsExtension modularPaths = sourceSet.modularPaths

        dependsOn modularPaths

        // Add modular dependencies and their transitive dependencies to module path.
        jvmArgumentProviders.add(modularPaths.runtimeArguments)

        // Modify the default classpath.
        classpath = modularPaths.runtimeClasspath

        doFirst {
          modularPaths.logRuntimePaths(logger)
        }
      }
    }

    // Configure (tasks.test, sourceSets.test)
    tasks.matching { it.name ==~ /test(_[0-9]+)?/ }.all { Test task ->
      configureTestTaskForSourceSet(task, task.project.sourceSets.test)
    }

    // Configure module versions.
    tasks.withType(JavaCompile).configureEach { task ->
      // TODO: LUCENE-10267: workaround for gradle bug. Remove when the corresponding issue is fixed.
      task.options.compilerArgumentProviders.add((CommandLineArgumentProvider) { ->
        if (task.getClasspath().isEmpty()) {
          return ["--module-version", project.version.toString()]
        } else {
          return []
        }
      })

      task.options.javaModuleVersion.set(provider {
        return project.version.toString()
      })
    }
  }
}


