/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

plugins {
  // Apply convention plugins from the composite build-infra project.
  // The order of plugins does matter (most of the time).
  id "lucene.root-project.check-environment"
  id "lucene.root-project.setup"

  id "lucene.all-projects.conventions"

  id "lucene.help"

  id "lucene.java.alternative-jdk-support"
  id "lucene.java-projects.conventions"

  id "lucene.java.core.mrjar"
  id "lucene.java.fail-on-no-tests"

  id "lucene.validation.spotless-groovy"
  id "lucene.validation.spotless-java"
  id "lucene.validation.lockfile"
  id "lucene.validation.gradle-versions-cleanup"
  id "lucene.validation.gradlew-scripts-customizations"

  // perhaps move this to a convention plugin or remove entirely?
  id "lucene.build-infra"

  // TODO: review stuff below this line.

  // Apply other plugins.
  alias(deps.plugins.spotless) apply false
  alias(deps.plugins.benmanes.versions)
  alias(deps.plugins.forbiddenapis) apply false
  alias(deps.plugins.randomizedtesting) apply false
  alias(deps.plugins.owasp.dependencycheck)
  alias(deps.plugins.undercouch.download) apply false
  alias(deps.plugins.errorprone) apply false
  alias(deps.plugins.jacocolog) apply false
}

description = 'Grandparent project for Apache Lucene Core'

apply from: file('gradle/_to-remove/globals.gradle')

ext {
  // Minimum Java version required to compile and run Lucene.
  minJavaVersion = JavaVersion.toVersion(deps.versions.minJava.get())

  // Build timestamp.
  def tstamp = ZonedDateTime.now()
  buildDate = DateTimeFormatter.ofPattern("yyyy-MM-dd").format(tstamp)
  buildTime = DateTimeFormatter.ofPattern("HH:mm:ss").format(tstamp)
  buildYear = DateTimeFormatter.ofPattern("yyyy").format(tstamp)

  // Allow defining external tool locations using system props.
  externalTool = { name ->
    def resolved = propertyOrDefault("${name}.exe", name as String)
    logger.info("External tool '${name}' resolved to: ${resolved}")
    return resolved
  }
}

configurations {
  groovy
}

dependencies {
  // Use a newer groovy that doesn't have illegal reflective accesses.
  groovy deps.groovy
}

// Include smaller chunks configuring dedicated build areas.
// Some of these intersect or add additional functionality.
// The order of inclusion of these files shouldn't matter (but may
// if the build file is incorrectly written and evaluates something
// eagerly).
configure(rootProject) {
  ext {
    scriptResources = { buildscript ->
      return file(buildscript.sourceFile.absolutePath.replaceAll('.gradle$', ""))
    }
  }
}

// Set up defaults and configure aspects for certain modules or functionality
// (java, tests)
apply from: file('gradle/java/modules.gradle')

// IDE support, settings and specials.
apply from: file('gradle/ide/intellij-idea.gradle')
apply from: file('gradle/ide/eclipse.gradle')

// Maven artifact publishing.
apply from: file('gradle/maven/publications.gradle')

// Validation tasks
apply from: file('gradle/validation/measure-task-times.gradle')
apply from: file('gradle/validation/error-prone.gradle')
apply from: file('gradle/validation/precommit.gradle')
apply from: file('gradle/validation/forbidden-apis.gradle')
apply from: file('gradle/validation/jar-checks.gradle')
apply from: file('gradle/validation/git-status.gradle')
apply from: file('gradle/validation/validate-source-patterns.gradle')
apply from: file('gradle/validation/rat-sources.gradle')
apply from: file('gradle/validation/owasp-dependency-check.gradle')
apply from: file('gradle/validation/ecj-lint.gradle')

// Wire up included builds to some validation tasks.
rootProject.tasks.named("tidy").configure {
  dependsOn gradle.includedBuilds*.task(":tidy")
}

// Source or data regeneration tasks
apply from: file('gradle/generation/regenerate.gradle')
apply from: file('gradle/generation/jflex.gradle')
apply from: file('gradle/generation/moman.gradle')
apply from: file('gradle/generation/snowball.gradle')
apply from: file('gradle/generation/kuromoji.gradle')
apply from: file('gradle/generation/nori.gradle')
apply from: file('gradle/generation/icu.gradle')
apply from: file('gradle/generation/javacc.gradle')
apply from: file('gradle/generation/forUtil.gradle')
apply from: file('gradle/generation/antlr.gradle')
apply from: file('gradle/generation/unicode-test-classes.gradle')
apply from: file('gradle/generation/extract-jdk-apis.gradle')

apply from: file('gradle/datasets/external-datasets.gradle')

// Additional development aids.
apply from: file('gradle/testing/per-project-summary.gradle')
apply from: file('gradle/testing/slowest-tests-at-end.gradle')
apply from: file('gradle/testing/failed-tests-at-end.gradle')
apply from: file('gradle/testing/profiling.gradle')
apply from: file('gradle/testing/beasting.gradle')
apply from: file('gradle/testing/coverage.gradle')

apply from: file('gradle/documentation/documentation.gradle')
apply from: file('gradle/documentation/changes-to-html.gradle')
apply from: file('gradle/documentation/markdown.gradle')
apply from: file('gradle/documentation/render-javadoc.gradle')
apply from: file('gradle/documentation/check-broken-links.gradle')

apply from: file('gradle/hacks/downloader-retries.gradle')
apply from: file('gradle/hacks/gradle-archives.gradle')
apply from: file('gradle/hacks/wipe-temp.gradle')
apply from: file('gradle/hacks/hashmapAssertions.gradle')
apply from: file('gradle/hacks/turbocharge-jvm-opts.gradle')
apply from: file('gradle/hacks/dummy-outputs.gradle')

apply from: file('gradle/pylucene/pylucene.gradle')
