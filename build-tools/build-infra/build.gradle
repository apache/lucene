/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
  id "java-gradle-plugin"
  id "groovy-gradle-plugin"

  alias(deps.plugins.forbiddenapis) apply false
}

repositories {
  mavenCentral()
  gradlePluginPortal()
}

apply from: file("ecj-source.gradle")

group = "org.apache"

java {
  sourceCompatibility = JavaVersion.toVersion(deps.versions.minJava.get())
  targetCompatibility = JavaVersion.toVersion(deps.versions.minJava.get())
}

gradlePlugin {
  automatedPublishing = false

  plugins {
    CheckEnvironmentPlugin {
      id = 'lucene.root-project.check-environment'
      implementationClass = 'org.apache.lucene.gradle.plugins.misc.CheckEnvironmentPlugin'
    }

    RootProjectSetupPlugin {
      id = 'lucene.root-project.setup'
      implementationClass = 'org.apache.lucene.gradle.plugins.misc.RootProjectSetupPlugin'
    }

    JavaProjectConventionsPlugin {
      id = 'lucene.java-projects.conventions'
      implementationClass = 'org.apache.lucene.gradle.plugins.java.JavaProjectConventionsPlugin'
    }
  }
}

apply from: file("declare-dependencies.gradle")

def hasJavaFlightRecorder = ModuleLayer.boot().findModule('jdk.jfr').map {otherModule ->
  this.getClass().module.canRead(otherModule)
}.orElse(false)
if (!hasJavaFlightRecorder) {
  logger.warn('Module jdk.jfr is not available; skipping compilation of Java Flight Recorder support.')
  tasks.named('compileJava').configure {
    exclude('**/ProfileResults.java')
  }
}

tasks.register("tidy", {})
