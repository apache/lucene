/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
  id "java-gradle-plugin"
  id "groovy-gradle-plugin"

  alias(deps.plugins.spotless) apply false
  alias(deps.plugins.forbiddenapis) apply false
}

repositories {
  mavenCentral()
  gradlePluginPortal()
}

group = "org.apache"

java {
  sourceCompatibility = JavaVersion.toVersion(deps.versions.minJava.get())
  targetCompatibility = JavaVersion.toVersion(deps.versions.minJava.get())
}

gradlePlugin {
  automatedPublishing = false

  plugins {
    buildInfra {
      id = 'lucene.build-infra'
      implementationClass = 'org.apache.lucene.gradle.buildinfra.BuildInfraPlugin'
    }
  }
}

// Convert a plugin dependency to a regular dependency so that we can
// use [plugins] section in the top-level toml but declare regular
// project dependencies here.
static Provider<String> plugin(Provider<PluginDependency> plugin) {
  return plugin.map {
    if (it.pluginId == "com.carrotsearch.gradle.buildinfra") {
      return "${it.pluginId}:${it.pluginId}.gradle.plugin:${it.version}".toString()
    } else if (it.pluginId == "de.thetaphi.forbiddenapis") {
      return "de.thetaphi:forbiddenapis:${it.version}".toString()
    } else {
      return "${it.pluginId}:${it.pluginId.replaceFirst(".*\\.", "")}-plugin-gradle:${it.version}".toString()
    }
  }
}

dependencies {
  implementation gradleApi()
  implementation localGroovy()
  implementation deps.commons.codec

  implementation plugin(deps.plugins.carrotsearch.buildinfra)
  implementation plugin(deps.plugins.forbiddenapis)
  implementation plugin(deps.plugins.spotless)
}

def hasJavaFlightRecorder = ModuleLayer.boot().findModule('jdk.jfr').map(this.class.module::canRead).orElse(false)
if (!hasJavaFlightRecorder) {
  logger.warn('Module jdk.jfr is not available; skipping compilation of Java Flight Recorder support.')
  tasks.named('compileJava').configure {
    exclude('**/ProfileResults.java')
  }
}

tasks.register("tidy", {})