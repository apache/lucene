/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.carrotsearch.gradle.buildinfra.dependencychecks.DependencyChecksPlugin

// Configure dependency checks plugin which validates and updates the top-level
// versions.lock, taking care of cross-configuration consistency of transitive dependencies.
//
// https://github.com/carrotsearch/gradle-build-infra#plugin-comcarrotsearchgradlebuildinfradependencychecksdependencychecksplugin

allprojects {
  // We don't care about the build infra deps in the lock file.
  if (it.path == ":lucene:build-tools:build-infra-shadow") {
    return
  }

  plugins.apply(DependencyChecksPlugin)

  def mainConfigurations = project.configurations.matching {
    it.name in [
      "compileClasspath",
      "runtimeClasspath"
    ]
  }

  def testConfigurations = project.configurations.matching {
    it.name in [
      "annotationProcessor",
      "testCompileClasspath",
      "testRuntimeClasspath"
    ]
  }

  dependencyVersionChecks {
    lockFileComment = "An inventory of resolved dependency versions. Do not edit this file directly."

    configurationGroups {
      main_dependencies {
        include provider {
          mainConfigurations.collect {
            it.name
          }
        }
      }

      test_dependencies {
        include provider {
          testConfigurations.collect {
            it.name
          }
        }
      }
    }
  }

  dependencies {
    constraints {
      mainConfigurations.configureEach { Configuration conf ->
        // no resolutions for conflicting dependencies at the moment.
      }
    }
  }
}
