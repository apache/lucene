/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.apache.lucene.gradle.buildoptions.*

// Common setup for all projects.

if (project != project.rootProject) {
  throw new GradleException("Applicable to rootProject only: " + project.path)
}

// Apply build options plugin to the root project early.

rootProject.plugins.apply(BuildOptionsPlugin)
def buildOptions = rootProject.getExtensions().getByType(BuildOptionsExtension.class)

// Determine project version.

String luceneVersion = deps.versions.lucene.get()
def versionReleaseProperty = buildOptions.addOption("version.release", "Explicitly sets project version to the provided string (x.y.z).").getValue()
def versionSuffixProperty = buildOptions.addOption("version.suffix", "Appends project version suffix to base version (${luceneVersion}).", "SNAPSHOT").getValue()

if (versionReleaseProperty.isPresent()) {
  project.version = versionReleaseProperty
} else {
  project.version = "${luceneVersion}-${versionSuffixProperty}"
}

allprojects {project ->
  // All projects have the base plugin (convention tasks like 'check', etc.)
  apply plugin: 'base'

  // Apply build options plugin to all projects, even if they don't declare any options.
  project.plugins.apply(BuildOptionsPlugin)

  // Project group and version.
  group = "org.apache"
  version = rootProject.version

  // Source repositories for dependencies.
  repositories {
    mavenCentral()
  }

  // Common archive artifact naming.
  var baseExt = project.getExtensions().getByType(BasePluginExtension)
  baseExt.archivesName.convention(project.path.replaceAll("^:", "").replace(':', '-'))

  // Common tasks or meta-tasks.
  tasks.register("tidy", {
    description "Applies all code formatters and other enforced cleanups to the project."
    group "verification"
  })
}
