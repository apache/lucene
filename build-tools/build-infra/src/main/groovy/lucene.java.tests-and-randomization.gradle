/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.apache.tools.ant.taskdefs.condition.Os
import org.apache.tools.ant.types.Commandline
import org.gradle.api.tasks.testing.logging.*
import com.carrotsearch.randomizedtesting.generators.RandomPicks
import org.apache.lucene.gradle.ErrorReportingTestListener

def loggingConfigFile = rootProject.layout.projectDirectory.file("gradle/testing/logging.properties")
def verboseModeHookInstalled = false

// Pass certain build options to the test JVM as system properties
def optionsInheritedAsProperties = []

// JVM options
Provider<String> minHeapSizeOption = buildOptions.addOption("tests.minheapsize", "Minimum heap size for test JVMs", "256m")
Provider<String> heapSizeOption = buildOptions.addOption("tests.heapsize", "Heap size for test JVMs", "512m")

// Vectorization related options.
String randomVectorSize = RandomPicks.randomFrom(new Random(project.ext.projectSeedLong), [
  "default",
  "128",
  "256",
  "512"
])
Provider<Boolean> defaultvectorizationOption = buildOptions.addBooleanOption("tests.defaultvectorization",
    "Uses defaults for running tests with correct JVM settings to test Panama vectorization (tests.jvmargs, tests.vectorsize, tests.forceintegervectors).", false)
buildOptions.addOption("tests.vectorsize", "Sets preferred vector size in bits.", provider {
  defaultvectorizationOption.get() ? 'default' : randomVectorSize
})
buildOptions.addBooleanOption("tests.forceintegervectors", "Forces use of integer vectors even when slow.", provider {
  defaultvectorizationOption.get() ? false : (randomVectorSize != 'default')
})
optionsInheritedAsProperties += [
  "tests.vectorsize",
  "tests.forceintegervectors"
]

// Verbatim JVM arguments; make it also accept TEST_JVM_ARGS env. variable.
Provider<String> jvmArgsOption = buildOptions.addOption("tests.jvmargs", "Arguments passed to each forked test JVM.",
    provider {
      ->
      return (isCIBuild || defaultvectorizationOption.get()) ? "" : "-XX:TieredStopAtLevel=1 -XX:+UseParallelGC -XX:ActiveProcessorCount=1"
    })
jvmArgsOption = project.providers.environmentVariable("TEST_JVM_ARGS").orElse(jvmArgsOption)

// cwd and tmp dir for forked JVMs.
Provider<Directory> workDirOption = buildOptions.addDirOption("tests.workDir", "Working directory for forked test JVMs.",
    project.layout.buildDirectory.dir("tests-cwd"))
Provider<Directory> tmpDirOption = buildOptions.addDirOption("tests.tmpDir", "Temp directory for forked test JVMs.",
    project.layout.buildDirectory.dir("tests-tmp"))
def testsCwd = workDirOption.get().asFile
def testsTmpDir = workDirOption.get().asFile

// Asserts, debug output.
Provider<Boolean> verboseOption = buildOptions.addBooleanOption("tests.verbose", "Enables verbose test output mode (emits full test outputs immediately).", false)
Provider<Boolean> haltOnFailureOption = buildOptions.addBooleanOption("tests.haltonfailure", "Halt processing early on test failure.", false)
Provider<Boolean> failFastOption = buildOptions.addBooleanOption("tests.failfast", "Stop the build early on failure.", false)
Provider<Boolean> rerunOption = buildOptions.addBooleanOption("tests.rerun", "Always rerun the test task, even if nothing has changed on input.", true)

// How many testing JVM forks to create
Provider<Integer> jvmsOption = buildOptions.addIntOption("tests.jvms", "The number of forked test JVMs",
    provider { -> ((int) Math.max(1, Math.min(Runtime.runtime.availableProcessors() / 2.0, 4.0))) })

// GITHUB#13986: Allow easier configuration of the Panama Vectorization provider with newer Java versions
Provider<Integer> upperJavaFeatureVersionOption = buildOptions.addIntOption(
    "tests.upperJavaFeatureVersion", "Min JDK feature version to configure the Panama Vectorization provider")

// Test reiteration, filtering and component randomization options.
buildOptions.addIntOption("tests.iters", "Duplicate (re-run) each test case N times.")
optionsInheritedAsProperties += ["tests.iters"]

buildOptions.addIntOption("tests.multiplier", "Value multiplier for randomized tests.")
optionsInheritedAsProperties += ["tests.multiplier"]

buildOptions.addIntOption("tests.maxfailures", "Skip tests after a given number of failures.")
optionsInheritedAsProperties += ["tests.maxfailures"]

buildOptions.addIntOption("tests.timeoutSuite", "Timeout (in millis) for an entire suite.")
optionsInheritedAsProperties += ["tests.timeoutSuite"]

Provider<Boolean> assertsOption = buildOptions.addBooleanOption("tests.asserts", "Enables or disables assertions mode.", true)
optionsInheritedAsProperties += ["tests.asserts"]

buildOptions.addBooleanOption("tests.infostream", "Enables or disables infostream logs.", false)
optionsInheritedAsProperties += ["tests.infostream"]

buildOptions.addBooleanOption("tests.leaveTemporary", "Leave temporary directories after tests complete.", false)
optionsInheritedAsProperties += ["tests.leaveTemporary"]

buildOptions.addOption("tests.codec", "Sets the codec tests should run with.", "random")
optionsInheritedAsProperties += ["tests.codec"]

buildOptions.addOption("tests.directory", "Sets the Directory implementation tests should run with.", "random")
optionsInheritedAsProperties += ["tests.directory"]

buildOptions.addOption("tests.postingsformat", "Sets the postings format tests should run with.", "random")
optionsInheritedAsProperties += ["tests.postingsformat"]

buildOptions.addOption("tests.docvaluesformat", "Sets the doc values format tests should run with.", "random")
optionsInheritedAsProperties += ["tests.docvaluesformat"]

buildOptions.addOption("tests.locale", "Sets the default locale tests should run with.", "random")
optionsInheritedAsProperties += ["tests.locale"]

buildOptions.addOption("tests.timezone", "Sets the default time zone tests should run with.", "random")
optionsInheritedAsProperties += ["tests.timezone"]

buildOptions.addOption("tests.filter", "Applies a test filter (see ./gradlew :helpTests).")
optionsInheritedAsProperties += ["tests.filter"]

buildOptions.addBooleanOption("tests.nightly", "Enables or disables @Nightly tests.", false)
buildOptions.addBooleanOption("tests.monster", "Enables or disables @Monster tests.", false)
buildOptions.addBooleanOption("tests.awaitsfix", "Enables or disables @AwaitsFix tests.", false)
optionsInheritedAsProperties += [
  "tests.nightly",
  "tests.monster",
  "tests.awaitsfix"
]

buildOptions.addBooleanOption("tests.gui", "Enables or disables @RequiresGUI tests.", provider {
  ->
  return rootProject.ext.isCIBuild
})

buildOptions.addOption("tests.file.encoding", "Sets the default file.encoding on test JVM.", provider {
  ->
  return RandomPicks.randomFrom(new Random(project.ext.projectSeedLong), [
    "US-ASCII",
    "ISO-8859-1",
    "UTF-8"
  ])
})

// TODO: do we still use these?
// Test data file used.
// [propName: 'tests.linedocsfile', value: 'europarl.lines.txt.gz', description: "Test data file path."],
// miscellaneous; some of them very weird.
// [propName: 'tests.LUCENE_VERSION', value: baseVersion, description: "Base Lucene version."],
// [propName: 'tests.bwcdir', value: null, description: "Data for backward-compatibility indexes."]


// If we're running in verbose mode and:
// 1) worker count > 1
// 2) number of 'test' tasks in the build is > 1
// then the output would very likely be mangled on the
// console. Fail and let the user know what to do.
def verboseMode = verboseOption.get().booleanValue()
if (verboseMode && !verboseModeHookInstalled) {
  verboseModeHookInstalled = true
  if (gradle.startParameter.maxWorkerCount > 1) {
    gradle.taskGraph.whenReady { graph ->
      def testTasks = graph.allTasks.findAll { task -> task instanceof Test }
      if (testTasks.size() > 1) {
        throw new GradleException("Run your tests in verbose mode only with --max-workers=1 option passed to gradle.")
      }
    }
  }
}

tasks.withType(Test).configureEach {
  // Running any test task should first display the root randomization seed.
  dependsOn ":showTestsSeed"

  ext {
    testOutputsDir = file("${reports.junitXml.outputLocation.get()}/outputs")
  }

  // LUCENE-9660: Make it possible to always rerun tests, even if they're incrementally up-to-date.
  if (rerunOption.get()) {
    outputs.upToDateWhen { false }
  }

  maxParallelForks = jvmsOption.get()
  if (verboseMode && maxParallelForks != 1) {
    logger.lifecycle("tests.jvm forced to 1 in verbose mode.")
    maxParallelForks = 1
  }

  if (failFastOption.get()) {
    failFast true
  }

  workingDir testsCwd
  useJUnit()

  minHeapSize = minHeapSizeOption.get()
  maxHeapSize = heapSizeOption.get()

  ignoreFailures = (haltOnFailureOption.get() == false)

  // Up to JDK-15 we have to enforce --illegal-access=deny, because we want no code to access
  // JDK internals; JDK-16 and later will default to deny, see https://openjdk.java.net/jeps/396:
  if (rootProject.ext.runtimeJavaVersion < JavaVersion.VERSION_16) {
    jvmArgs '--illegal-access=deny'
  }

  if (assertsOption.get()) {
    jvmArgs("-ea", "-esa")
  } else {
    enableAssertions = false
  }

  // Lucene needs to optional modules at runtime, which we want to enforce for testing
  // (if the runner JVM does not support them, it will fail tests):
  jvmArgs '--add-modules', 'jdk.management'

  // dump heap on OOM.
  jvmArgs "-XX:+HeapDumpOnOutOfMemoryError"

  // Enable the vector incubator module on supported Java versions:

  Provider<Integer> minMajorVersion = upperJavaFeatureVersionOption.map { ver -> Integer.parseInt(JavaVersion.toVersion(ver).majorVersion) }
  JavaVersion runtimeJava = rootProject.ext.runtimeJavaVersion
  boolean incubatorJavaVersion = rootProject.ext.vectorIncubatorJavaVersions.contains(runtimeJava)
  boolean manualMinMajorVersion = minMajorVersion.isPresent() &&
      Integer.parseInt(runtimeJava.majorVersion) <= minMajorVersion.get()
  if (incubatorJavaVersion || manualMinMajorVersion) {
    jvmArgs '--add-modules', 'jdk.incubator.vector'
    if (manualMinMajorVersion) {
      systemProperty 'org.apache.lucene.vectorization.upperJavaFeatureVersion', Integer.toString(minMajorVersion.get())
    }
  }

  jvmArgs '--enable-native-access=' + (project.path in [
    ':lucene:core',
    ':lucene:codecs',
    ":lucene:distribution.tests",
    ":lucene:test-framework"
  ] ? 'ALL-UNNAMED' : 'org.apache.lucene.core')

  def loggingFileProvider = new LoggingFileArgumentProvider()
  loggingFileProvider.setLoggingConfigFile(loggingConfigFile)
  loggingFileProvider.setTempDir(tmpDirOption.get())
  jvmArgumentProviders.add(loggingFileProvider)

  systemProperty 'java.awt.headless', 'true'
  systemProperty 'jdk.map.althashing.threshold', '0'

  if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
    systemProperty 'java.security.egd', 'file:/dev/./urandom'
  }

  // Pass certain buildOptions as system properties
  for (String key : optionsInheritedAsProperties) {
    def option = buildOptions.optionValue(key)
    if (option.isPresent()) {
      systemProperty(key, buildOptions.optionValue(key).get())
    }
  }

  // Turn jenkins blood red for hashmap bugs
  systemProperty 'jdk.map.althashing.threshold', '0'

  // Set up cwd and temp locations.
  systemProperty("java.io.tmpdir", testsTmpDir)
  doFirst {
    testsCwd.mkdirs()
    testsTmpDir.mkdirs()
  }

  jvmArgs Commandline.translateCommandline(jvmArgsOption.get())

  // Disable HTML report generation. The reports are big and slow to generate.
  reports.html.required = false

  // Set up logging.
  testLogging {
    events TestLogEvent.FAILED
    exceptionFormat TestExceptionFormat.FULL
    showExceptions true
    showCauses true
    showStackTraces true
    stackTraceFilters.clear()
    showStandardStreams false
  }

  // Disable automatic test class detection, rely on class names only. This is needed for testing
  // against JDKs where the bytecode is unparseable by Gradle, for example.
  // We require all tests to start with Test*, this simplifies include patterns greatly.
  scanForTestClasses = false
  include '**/Test*.class'
  exclude '**/*$*'

  // Set up custom test output handler.
  doFirst {
    project.delete testOutputsDir
  }

  def spillDir = getTemporaryDir().toPath()
  def listener = new ErrorReportingTestListener(test.testLogging, spillDir, testOutputsDir.toPath(), verboseMode)
  addTestOutputListener(listener)
  addTestListener(listener)

  doFirst {
    // Print some diagnostics about locations used.
    logger.info("Test folders for {}: cwd={}, tmp={}", project.path, testsCwd, testsTmpDir)
  }
}


class LoggingFileArgumentProvider implements CommandLineArgumentProvider {
  @InputFile
  @PathSensitive(PathSensitivity.RELATIVE)
  RegularFile loggingConfigFile

  @Internal
  Directory tempDir

  @Override
  Iterable<String> asArguments() {
    [
      "-Djava.util.logging.config.file=${loggingConfigFile.getAsFile()}",
      "-DtempDir=${tempDir.getAsFile()}"
    ]
  }
}


ext {
  // Resolves test option's value.
  resolvedTestOption = { propName ->
    return buildOptions[propName].get()
  }

  commonDir = project(":lucene").projectDir
}
