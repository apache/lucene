/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// This adds jacoco code coverage to tests.

if (project != project.rootProject) {
  throw new GradleException("Applicable to rootProject only: " + project.path)
}

Provider<Boolean> coverageOption = buildOptions.addBooleanOption("tests.coverage", "Enables jacoco test coverage.", false)

// Run with jacoco if either 'coverage' task is explicitly enabled or tests.coverage option is true.
def withCoverage = gradle.startParameter.taskNames.contains("coverage") || coverageOption.get()

if (withCoverage) {
  plugins.apply(deps.plugins.jacocolog.get().pluginId)

  // Synthetic task to enable test coverage (and aggregated reports).

  def jacocoAggregatedReport = tasks.named("jacocoAggregatedReport")
  tasks.register("coverage", {
    dependsOn jacocoAggregatedReport
  })

  jacocoAggregatedReport.configure {
    doLast {
      logger.lifecycle("Aggregated code coverage report at: ${reports.html.entryPoint}\n")
    }
  }

  subprojects {
    plugins.apply(deps.plugins.jacocolog.get().pluginId)

    plugins.withType(JavaPlugin).configureEach {
      // Synthetic task to enable test coverage (and reports).
      def jacocoTestReport = tasks.named("jacocoTestReport")
      tasks.register("coverage", {
        dependsOn "test", jacocoTestReport
      })

      tasks.withType(Test).configureEach { testTask ->
        // Configure jacoco destination file to be within the test
        // task's working directory
        jacoco {
          destinationFile = file("${testTask.workingDir}/jacoco.exec")
        }

        // Test reports run after the test task, if it's run at all.
        testTask.finalizedBy jacocoTestReport
      }

      jacocoTestReport.configure {
        doLast {
          logger.lifecycle("Code coverage report at: ${reports.html.entryPoint}.\n")
        }
      }
    }
  }
}
