/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.apache.lucene.gradle.plugins.spotless.ApplyGoogleJavaFormatTask
import org.apache.lucene.gradle.plugins.spotless.CheckGoogleJavaFormatTask

/*
 * This adds automatic (and enforced) code formatting using
 * google-java-format (LUCENE-9564, GITHUB-14824).
 */
configure(allprojects) {prj ->
  Provider<Integer> batchSizeOption = buildOptions.addIntOption(
      "lucene.gjf.batchSize", "Sets the batch size for google-java-format tasks.", 5)

  plugins.withType(JavaPlugin).configureEach {
    def applyGoogleJavaFormat = tasks.register("applyGoogleJavaFormat", ApplyGoogleJavaFormatTask)

    def checkGoogleJavaFormat = tasks.register("checkGoogleJavaFormat", CheckGoogleJavaFormatTask, {
      colorizedOutput = !rootProject.ext.isCIBuild
      mustRunAfter applyGoogleJavaFormat
    })

    [
      checkGoogleJavaFormat,
      applyGoogleJavaFormat
    ].each {
      it.configure {
        batchSize.set(batchSizeOption)

        if (project.path == ":lucene:build-tools:build-infra-shadow") {
          sourceFiles = rootProject.fileTree("build-tools/build-infra/src", {
            include "**/*.java"
          })
        } else {
          sourceFiles = project.fileTree("src", {
            include "**/*.java"

            switch (prj.path) {
              case ":lucene:core":
                exclude("**/StandardTokenizerImpl.java")
                break

              case ":lucene:analysis:common":
                exclude("**/HTMLStripCharFilter.java",
                "**/UAX29URLEmailTokenizerImpl.java")
                break

              case ":lucene:test-framework":
                exclude("**/EmojiTokenizationTestUnicode_11_0.java",
                "**/WordBreakTestUnicode_9_0_0.java")
                break

              case ":lucene:queryparser":
                exclude("**/classic/ParseException.java",
                "**/classic/QueryParser.java",
                "**/classic/QueryParserConstants.java",
                "**/classic/QueryParserTokenManager.java",
                "**/classic/Token.java",
                "**/classic/TokenMgrError.java",
                "**/standard/parser/ParseException.java",
                "**/standard/parser/StandardSyntaxParser.java",
                "**/standard/parser/StandardSyntaxParserConstants.java",
                "**/standard/parser/StandardSyntaxParserTokenManager.java",
                "**/standard/parser/Token.java",
                "**/standard/parser/TokenMgrError.java",
                "**/surround/parser/ParseException.java",
                "**/surround/parser/QueryParser.java",
                "**/surround/parser/QueryParserConstants.java",
                "**/surround/parser/QueryParserTokenManager.java",
                "**/surround/parser/Token.java",
                "**/surround/parser/TokenMgrError.java")
                break
            }
          })
        }
      }
    }

    // Connect to check and tidy tasks.
    tasks.named("tidy").configure {v ->
      v.dependsOn applyGoogleJavaFormat
    }

    tasks.named("check").configure {v ->
      v.dependsOn checkGoogleJavaFormat
    }
  }
}
