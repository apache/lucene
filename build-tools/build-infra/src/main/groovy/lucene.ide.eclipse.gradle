/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.apache.tools.ant.filters.ReplaceTokens;
import org.gradle.plugins.ide.eclipse.model.SourceFolder
import org.gradle.plugins.ide.eclipse.model.ClasspathEntry

if (project != project.rootProject) {
  throw new GradleException("Applicable to rootProject only: " + project.path)
}

Provider<String> eclipseJavaVersionOption = buildOptions.addOption("eclipse.javaVersion", "Set Java version for Eclipse IDE", deps.versions.minJava.get())
Provider<String> eclipseErrorsOption = buildOptions.addOption("eclipse.errors", "Sets eclipse IDE lint level (ignore/warning/error)", "warning")

if (gradle.startParameter.taskNames.contains("eclipse")) {
  project.pluginManager.apply("java-base")
  project.pluginManager.apply("eclipse")

  def resources = rootProject.file("gradle/ide/eclipse")
  def eclipseJavaVersion = eclipseJavaVersionOption.get()
  def relativize = { File other -> rootProject.rootDir.relativePath(other).toString() }

  eclipse {
    project {
      name = "Apache Lucene ${version}"
    }

    classpath {
      defaultOutputDir = file('build/eclipse')

      downloadSources = true
      downloadJavadoc = false

      plusConfigurations += allprojects.findAll{ prj ->
        return prj.plugins.hasPlugin(JavaPlugin)
      }.collectMany {
        return [
          it.configurations.compileClasspath,
          it.configurations.testCompileClasspath
        ]
      }

      file {
        whenMerged { classpath ->
          classpath.entries.removeAll {
            return it.kind == "src" || (it.kind == "lib" && it.getPath() ==~ /(.+)lucene-.*\.jar/)
          }

          // Wipe attributes which only contain a blank "gradle_used_by_scope" for every single library.
          classpath.entries.each {
            if (it.kind == "lib") {
              it.getEntryAttributes().clear()
            }
            // The generated gradle-api.jar has no source attached, attaching source is a PITA
            // for now just attach a javadocs URL, which improves editor functionality:
            if (it.getPath() ==~ /(.+)gradle-api-.*\.jar/) {
              it.getEntryAttributes().put("javadoc_location", "https://docs.gradle.org/${deps.versions.minGradle.get()}/javadoc")
            }
          }

          def projects = allprojects.findAll { prj ->
            return prj.plugins.hasPlugin(JavaPlugin)
          }

          Set<String> sourceSetNames = [
            'main',
            'test',
            "main${eclipseJavaVersion}" as String,
            "test${eclipseJavaVersion}" as String,
            'tools'
          ] as Set
          Set<String> sources = []
          projects.each { prj ->
            prj.sourceSets.each { sourceSet ->
              if (sourceSetNames.contains(sourceSet.name)) {
                sources += sourceSet.java.srcDirs.findAll { dir -> dir.exists() }.collect { dir -> relativize(dir) }
                sources += sourceSet.resources.srcDirs.findAll { dir -> dir.exists() }.collect { dir -> relativize(dir) }
              }
            }
          }

          classpath.entries += sources.sort().collect { name ->
            def sourceFolder = new SourceFolder(name, "build/eclipse/" + name)
            sourceFolder.setExcludes(["module-info.java"])
            return sourceFolder
          }
        }
      }
    }

    jdt {
      sourceCompatibility = eclipseJavaVersion
      targetCompatibility = eclipseJavaVersion
      javaRuntimeName = "JavaSE-$eclipseJavaVersion"
    }
  }

  tasks.register("luceneEclipseJdt", Sync, {
    def errorMode = eclipseErrorsOption.get()
    def ecjLintFile = rootProject.file('gradle/validation/ecj-lint/ecj.javadocs.prefs');

    description = 'Generates the Eclipse JDT settings file.'

    inputs.file(ecjLintFile)
    inputs.property('errorMode', errorMode)
    inputs.property('eclipseJavaVersion', eclipseJavaVersion as String)

    from rootProject.file("${resources}/dot.settings")
    into rootProject.file(".settings")
    filter(ReplaceTokens, tokens: [
      'ecj-lint-config': ecjLintFile.getText('UTF-8').replaceAll(/=error\b/, '=' + errorMode),
      'eclipseJavaVersion': eclipseJavaVersion as String
    ])
    filteringCharset = 'UTF-8'

    doLast {
      logger.lifecycle('Eclipse config for Java {} written with ECJ errors configured as {}. Change by altering build option eclipse.errors to ignore/warning/error.', eclipseJavaVersion, errorMode)
      logger.lifecycle('To edit classes of MR-JARs for a specific Java version, use e.g., -Peclipse.javaVersion=19')
    }
  })

  eclipseJdt {
    enabled = false
    dependsOn 'luceneEclipseJdt'
  }

  eclipseClasspath {
    inputs.property('eclipseJavaVersion', eclipseJavaVersion as String)
  }
}
