/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Add "help" tasks which display plain text files under 'help' folder.
if (project != project.rootProject) {
  throw new GradleException("Applicable to rootProject only: " + project.path)
}

def helpFiles = [
  [
    "Workflow",
    "help/workflow.txt",
    "Typical workflow commands."
  ],
  [
    "Tests",
    "help/tests.txt",
    "Tests, filtering, beasting, etc."
  ],
  [
    "Formatting",
    "help/formatting.txt",
    "Code formatting conventions."
  ],
  [
    "Jvms",
    "help/jvms.txt",
    "Using alternative or EA JVM toolchains."
  ],
  [
    "Deps",
    "help/dependencies.txt",
    "Declaring, inspecting and excluding dependencies."
  ],
  [
    "ForbiddenApis",
    "help/forbiddenApis.txt",
    "How to add/apply rules for forbidden APIs."
  ],
  [
    "LocalSettings",
    "help/localSettings.txt",
    "Local settings, overrides and build performance tweaks."
  ],
  [
    "Regeneration",
    "help/regeneration.txt",
    "How to refresh generated and derived resources."
  ],
  [
    "Jmh",
    "help/jmh.txt",
    "JMH micro-benchmarks."
  ],
  [
    "Git",
    "help/git.txt",
    "Git assistance and guides."
  ],
  [
    "IDEs",
    "help/IDEs.txt",
    "IDE support."
  ],
  [
    "Publishing",
    "help/publishing.txt",
    "Maven and other artifact publishing, signing, etc."
  ],
]

// Declare helpXyz task to display the given help section.
helpFiles.each { section, path, sectionInfo ->
  tasks.register("help${section}", {
    group = 'Help (developer guides and hints)'
    description = sectionInfo
    doFirst {
      println "\n" + rootProject.file(path).getText("UTF-8")
    }
  })
}

// Add custom section to the default 'help' task.
tasks.named("help").configure {
  doFirst {
    println ""
    println "This is Lucene ${rootProject.version} build file (gradle ${gradle.gradleVersion}). See some guidelines in files"
    println "found under the help/* folder or type any of these:"
    println ""

    helpFiles.each { section, path, sectionInfo ->
      println String.format(Locale.ROOT,
          "  gradlew :help%-16s # %s", section, sectionInfo)
    }

    println ""
    println "For the impatient, build the project with 'gradlew assemble', run all tests with 'gradlew check', check " +
        "your current build options with 'gradlew allOptions'."
    throw new StopExecutionException()
  }
}

// Make sure all help files exist.
def allHelpFilesExist = tasks.register("allHelpFilesExist", {
  doFirst {
    helpFiles.each { section, path, sectionInfo ->
      if (!rootProject.file(path).exists()) {
        throw new GradleException("Help file missing: ${path} (correct help.gradle)")
      }
    }
  }
})

tasks.named("check").configure {
  dependsOn allHelpFilesExist
}
