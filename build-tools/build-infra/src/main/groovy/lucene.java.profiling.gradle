/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.apache.lucene.gradle.ProfileResults

// Enable JFR profiling for tests.

if (project != project.rootProject) {
  throw new GradleException("Applicable to rootProject only: " + project.path)
}

def recordings = files()

allprojects {
  Provider<Boolean> profileOption = buildOptions.addBooleanOption("tests.profile", "Enable Java Flight Recorder profiling.", false)

  plugins.withType(JavaPlugin).configureEach {
    if (profileOption.get()) {
      def hasJavaFlightRecorder = ModuleLayer.boot().findModule('jdk.jfr')
          .map { module -> this.getClass().module.canRead(module) }.orElse(false)
      if (hasJavaFlightRecorder) {
        tasks.withType(Test).configureEach {
          jvmArgs("-XX:StartFlightRecording=dumponexit=true,maxsize=250M,settings=" + rootProject.file("gradle/testing/profiling.jfc"),
              "-XX:+UnlockDiagnosticVMOptions",
              "-XX:+DebugNonSafepoints")
          // delete any previous profile results
          doFirst {
            project.delete fileTree(dir: workingDir, include: '*.jfr')
          }
          doLast {
            recordings = recordings.plus fileTree(dir: workingDir, include: '*.jfr')
          }
        }
      } else {
        throw new GradleException('Module jdk.jfr is not available; Java Flight Recorder profiles cannot be enabled.')
      }
    }
  }

  Provider<String> modeOption = buildOptions.addOption(ProfileResults.MODE_KEY, "Profiling mode.", ProfileResults.MODE_DEFAULT)
  Provider<Integer> stackSizeOption = buildOptions.addIntOption(ProfileResults.STACKSIZE_KEY, "Profiling stack size.", Integer.parseInt(ProfileResults.STACKSIZE_DEFAULT))
  Provider<Integer> countOption = buildOptions.addIntOption(ProfileResults.COUNT_KEY, "Profiling entry count.", Integer.parseInt(ProfileResults.COUNT_DEFAULT))
  Provider<Boolean> lineNumbersOption = buildOptions.addBooleanOption(ProfileResults.LINENUMBERS_KEY, "Profiling with line numbers.", Boolean.parseBoolean(ProfileResults.LINENUMBERS_KEY))
  Provider<Boolean> frametypesOption = buildOptions.addBooleanOption(ProfileResults.FRAMETYPES_KEY, "Profiling frame types.", Boolean.parseBoolean(ProfileResults.FRAMETYPES_DEFAULT))

  if (it == rootProject && profileOption.get()) {
    gradle.buildFinished {
      if (!recordings.isEmpty()) {
        ProfileResults.printReport(recordings.getFiles().collect { it.toString() },
        modeOption.get(),
        stackSizeOption.get(),
        countOption.get(),
        lineNumbersOption.get(),
        frametypesOption.get())
      }
    }
  }
}
