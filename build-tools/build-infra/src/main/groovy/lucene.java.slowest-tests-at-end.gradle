/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Add test duration summary at the end of the build.

if (project != project.rootProject) {
  throw new GradleException("Applicable to rootProject only: " + project.path)
}

def allTests = []
def allSuites = []

allprojects {
  plugins.withType(JavaPlugin).configureEach {
    Provider<Boolean> slowestTestsOption = buildOptions.addBooleanOption("tests.slowestTests", "Print the summary of the slowest tests.", true)
    int slowestTestsMinTime = buildOptions.addIntOption("tests.slowestTests.minTime", "Minimum test time to consider a test slow (millis).", 500).get()
    Provider<Boolean> slowestSuitesOption = buildOptions.addBooleanOption("tests.slowestSuites", "Print the summary of the slowest suites.", true)
    int slowestSuitesMinTime = buildOptions.addIntOption("tests.slowestSuites.minTime", "Minimum suite time to consider a suite slow (millis).", 1000).get()

    tasks.withType(Test).configureEach { task ->
      if (slowestTestsOption.get()) {
        afterTest { desc, result ->
          def duration = (result.getEndTime() - result.getStartTime())
          if (duration >= slowestTestsMinTime) {
            allTests << [
              name    : "${desc.className.replaceAll('.+\\.', "")}.${desc.name} (${project.path})",
              duration: duration
            ]
          }
        }
      }

      if (slowestSuitesOption.get()) {
        afterSuite { desc, result ->
          // Gradle reports runner times as well, omit anything that isn't attached to a concrete class.
          if (desc.className != null) {
            def duration = (result.getEndTime() - result.getStartTime())
            if (duration >= slowestSuitesMinTime) {
              allSuites << [
                name    : "${desc.className.replaceAll('.+\\.', "")} (${project.path})",
                duration: duration
              ]
            }
          }
        }
      }
    }
  }
}

gradle.buildFinished { result ->
  if (result.getFailure() == null) {
    if (allTests) {
      def slowest = allTests
          .sort { a, b -> b.duration.compareTo(a.duration) }
          .take(10)
          .collect { e -> String.format(Locale.ROOT, "%5.2fs %s", e.duration / 1000d, e.name) }

      if (slowest) {
        logger.lifecycle("The slowest tests during this run:\n  " + slowest.join("\n  "))
      }
    }

    if (allSuites) {
      def slowest = allSuites
          .sort { a, b -> b.duration.compareTo(a.duration) }
          .take(10)
          .collect { e -> String.format(Locale.ROOT, "%5.2fs %s", e.duration / 1000d, e.name) }

      if (slowest) {
        logger.lifecycle("The slowest suites during this run:\n  " + slowest.join("\n  "))
      }
    }
  }
}
