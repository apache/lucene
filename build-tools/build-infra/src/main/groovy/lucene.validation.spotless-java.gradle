import com.diffplug.gradle.spotless.SpotlessPlugin
import com.diffplug.spotless.LineEnding

/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * LUCENE-9564: This adds automatic (and enforced) code formatting using
 * spotless and Google Java Format.
 */

configure(allprojects) { prj ->
  plugins.apply(SpotlessPlugin)

  plugins.withType(JavaPlugin).configureEach {
    spotless {
      java {
        lineEndings = LineEnding.UNIX
        endWithNewline()
        googleJavaFormat(deps.versions.googleJavaFormat.get())
        removeUnusedImports()

        // Apply to all Java sources
        target("src/**/*.java")

        // Exclude certain files (generated ones, mostly).
        switch (prj.path) {
          case ":lucene:build-tools:build-infra-shadow":
            target = sourceSets.main.allJava.sourceDirectories
            break

          case ":lucene:core":
            targetExclude("**/StandardTokenizerImpl.java")
            break

          case ":lucene:analysis:common":
            targetExclude("**/HTMLStripCharFilter.java",
            "**/UAX29URLEmailTokenizerImpl.java")
            break

          case ":lucene:test-framework":
            targetExclude("**/EmojiTokenizationTestUnicode_11_0.java",
            "**/WordBreakTestUnicode_9_0_0.java")
            break

          case ":lucene:expressions":
            break

          case ":lucene:queryparser":
            targetExclude("**/classic/ParseException.java",
            "**/classic/QueryParser.java",
            "**/classic/QueryParserConstants.java",
            "**/classic/QueryParserTokenManager.java",
            "**/classic/Token.java",
            "**/classic/TokenMgrError.java",
            "**/standard/parser/ParseException.java",
            "**/standard/parser/StandardSyntaxParser.java",
            "**/standard/parser/StandardSyntaxParserConstants.java",
            "**/standard/parser/StandardSyntaxParserTokenManager.java",
            "**/standard/parser/Token.java",
            "**/standard/parser/TokenMgrError.java",
            "**/surround/parser/ParseException.java",
            "**/surround/parser/QueryParser.java",
            "**/surround/parser/QueryParserConstants.java",
            "**/surround/parser/QueryParserTokenManager.java",
            "**/surround/parser/Token.java",
            "**/surround/parser/TokenMgrError.java")
            break
        }
      }
    }

    // Schedule the core formatting task to run after Java compilation (GH-12012)
    spotlessJava {
      mustRunAfter tasks.withType(JavaCompile)
    }
  }

  // Emit a custom message about how to fix formatting errors.
  tasks.matching { task -> task.name == "spotlessJavaCheck" }.configureEach {
    it.runToFixMessage.set("\nIMPORTANT: run the top-level './gradlew tidy' to " +
        "format the code automatically (see help/formatting.txt for more info).")
  }

  // Hook up spotless to tidy and check tasks.
  tasks.named("tidy").configure { v ->
    v.dependsOn tasks.matching { it.name == "spotlessApply" }
    v.dependsOn ":checkJdkInternalsExportedToGradle"
  }

  tasks.named("check").configure { v ->
    v.dependsOn tasks.matching { it.name == "spotlessCheck" }
    v.dependsOn ":checkJdkInternalsExportedToGradle"
  }
}
