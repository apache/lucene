/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.nio.charset.CharacterCodingException;
import java.nio.charset.CodingErrorAction;
import java.nio.charset.StandardCharsets;

import org.apache.rat.Defaults
import org.apache.rat.document.impl.FileDocument
import org.apache.rat.api.MetaData

import javax.inject.Inject;
import org.gradle.internal.logging.progress.ProgressLoggerFactory
import org.gradle.internal.logging.progress.ProgressLogger

if (project != project.rootProject) {
  throw new GradleException("Applicable to rootProject only: " + project.path)
}

List<String> extensions = ['java', 'xml',]

// Create source validation task local to each project
allprojects {
  def validateSourcePatterns = tasks.register("validateSourcePatterns", ValidateSourcePatternsTask, {
    group = 'Verification'
    description = 'Validate Source Patterns'

    sourceFiles = fileTree(projectDir) {
      include extensions.collect { ext ->"**/*." + ext }

      // Don't go into child projects (scanned separately).
      childProjects.keySet().each{
        exclude "${it}/**"
      }

      // default excludes.
      exclude '**/build/**'
      exclude '**/.idea/**'
      exclude '**/.gradle/**'
      // ignore txt files in source resources and tests.
      exclude 'src/**/*.txt'
    }
  })

  // Add source validation to per-project checks as well.
  tasks.named("check").configure {
    dependsOn validateSourcePatterns
  }

  // Ensure validation runs prior to any compilation task. This also means
  // no executable code can leak out to other modules.
  tasks.withType(JavaCompile).configureEach {
    mustRunAfter validateSourcePatterns
  }
}

project(':lucene:benchmark').tasks.withType(ValidateSourcePatternsTask).configureEach {
  sourceFiles.exclude 'data/**'
  sourceFiles.exclude 'work/**'
  // Known .txt offenders.
  sourceFiles.exclude '**/reuters.first20.lines.txt', '**/trecQRels.txt'
}

project(':').tasks.withType(ValidateSourcePatternsTask).configureEach {
  // Exclude ourselves because there are invalid patterns in the invalid patterns list...
  sourceFiles.exclude '**/lucene.validation.source-patterns.gradle'
}

@CacheableTask
class ValidateSourcePatternsTask extends DefaultTask {
  private static final Object ratBug = new Object()
  private ProgressLoggerFactory progressLoggerFactory

  @InputFiles
  @PathSensitive(PathSensitivity.RELATIVE)
  @IgnoreEmptyDirectories
  FileTree sourceFiles

  @Inject
  ValidateSourcePatternsTask(ProgressLoggerFactory progressLoggerFactory) {
    this.progressLoggerFactory = progressLoggerFactory
  }

  @TaskAction
  public void check() {
    def invalidPatterns = [
      (~$/\Q/**\E((?:\s)|(?:\*))*\Q{@inheritDoc}\E((?:\s)|(?:\*))*\Q*/\E/$) : '{@inheritDoc} on its own is unnecessary',
    ]

    def violations = new TreeSet();
    def reportViolation = { f, name ->
      String msg = String.format(Locale.ROOT, "%s: %s", f, name)
      logger.error(msg)
      violations.add(msg)
    }

    def xmlCommentPattern = ~$/(?sm)\Q<!--\E(.*?)\Q-->\E/$;
    def lineSplitter = ~$/[\r\n]+/$;
    def xmlTagPattern = ~$/(?m)\s*<[a-zA-Z].*/$;

    def isLicense = { matcher, ratDocument ->
      // See LUCENE-10419 - rat is not thread safe.
      synchronized (ratBug) {
        def licenseMatcher = Defaults.createDefaultMatcher();
        licenseMatcher.reset()
        return lineSplitter.split(matcher.group(1)).any { licenseMatcher.match(ratDocument, it) }
      }
    }

    def checkLicenseHeaderPrecedes = { f, description, contentPattern, commentPattern, text, ratDocument ->
      def contentMatcher = contentPattern.matcher(text);
      if (contentMatcher.find()) {
        def contentStartPos = contentMatcher.start();
        def commentMatcher = commentPattern.matcher(text);
        while (commentMatcher.find()) {
          if (isLicense(commentMatcher, ratDocument)) {
            if (commentMatcher.start() < contentStartPos) {
              break; // This file is all good, so break loop: license header precedes 'description' definition
            } else {
              reportViolation(f, description+' declaration precedes license header');
            }
          }
        }
      }
    }

    ProgressLogger progress = progressLoggerFactory.newOperation(this.class)
    progress.start(this.name, this.name)

    def validatingDecoder = StandardCharsets.UTF_8.newDecoder()
        .onMalformedInput(CodingErrorAction.REPORT).onUnmappableCharacter(CodingErrorAction.REPORT)

    sourceFiles.each { f ->
      try {
        progress.progress("Scanning ${f.name}")
        logger.debug('Scanning source file: {}', f);

        String text
        try {
          validatingDecoder.reset()
          text = f.withInputStream { input ->
            new InputStreamReader(input, validatingDecoder).getText()
          }
        } catch (CharacterCodingException e) {
          reportViolation(f, "incorrect UTF-8 encoding [${e}]")
          return // we can't proceed for this file
        }

        invalidPatterns.each { pattern, name ->
          def matcher = pattern.matcher(text);
          if (matcher.find()) {
            reportViolation(f, String.format(Locale.ROOT, '%s [start=%d, end=%d]', name, matcher.start(), matcher.end()));
          }
        }
        if (f.name.endsWith('.xml')) {
          def ratDocument = new FileDocument(f);
          checkLicenseHeaderPrecedes(f, '<tag>', xmlTagPattern, xmlCommentPattern, text, ratDocument);
        }
      } catch (e) {
        e.printStackTrace()
        throw new GradleException("Unhandled exception while validating patterns on file: " + f, e)
      }
    }

    progress.completed()

    if (!violations.isEmpty()) {
      throw new GradleException(String.format(Locale.ENGLISH, 'Found %d source violation(s):\n  %s',
      violations.size(),
      violations.join('\n  ')))
    }
  }
}
