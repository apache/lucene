/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.carrotsearch.gradle.buildinfra.buildoptions.BuildOptionsPlugin
import org.apache.lucene.gradle.plugins.astgrep.AstGrepPlugin
import org.apache.lucene.gradle.plugins.eclint.EditorConfigLintPlugin
import org.apache.lucene.gradle.plugins.gitgrep.GitGrepPlugin
import org.apache.lucene.gradle.plugins.gitinfo.GitInfoPlugin
import org.apache.lucene.gradle.plugins.globals.RegisterBuildGlobalsPlugin
import org.apache.lucene.gradle.plugins.regenerate.RegenerateTasksSupportPlugin

// Prepare the root project and some global infrastructure.

if (project != project.rootProject) {
  throw new GradleException("Applicable to rootProject only: " + project.path)
}

//
// Register these plugins early.
//
allprojects {
  plugins.apply(BuildOptionsPlugin)
}

plugins.apply(BasePlugin)

plugins.apply(RegisterBuildGlobalsPlugin)

plugins.apply(RegenerateTasksSupportPlugin)
plugins.apply(GitInfoPlugin)
plugins.apply(GitGrepPlugin)
plugins.apply(AstGrepPlugin)
plugins.apply(EditorConfigLintPlugin)

//
// Register this utility task on the root project.
//
tasks.register("checkJdkInternalsExportedToGradle", {
  doFirst {
    def jdkCompilerModule = ModuleLayer.boot().findModule("jdk.compiler").orElseThrow()
    def gradleModule = getClass().module
    def internalsExported = [
      "com.sun.tools.javac.api",
      "com.sun.tools.javac.file",
      "com.sun.tools.javac.parser",
      "com.sun.tools.javac.tree",
      "com.sun.tools.javac.util"
    ].stream()
    .allMatch({pkg -> jdkCompilerModule.isExported(pkg, gradleModule)})

    if (!internalsExported) {
      throw new GradleException(
      "Certain gradle tasks and plugins require access to jdk.compiler" +
      " internals, your gradle.properties might have just been generated or could be" +
      " out of sync (see gradle/template.gradle.properties)")
    }
  }
})

// Wire up included builds to some validation tasks.
tasks.matching {it.name == "tidy"}.configureEach {
  dependsOn gradle.includedBuilds*.task(":tidy")
}

tasks.matching {it.name == "check"}.configureEach {
  dependsOn gradle.includedBuilds*.task(":check")
}

// TODO: this shouldn't be here but it's used in multiple scripts that are racy in lazy-evaluation.
configure(project(":lucene:core")) {
  ext {
    mrjarJavaVersions = [24]
    apijars = layout.projectDirectory.dir("src/generated/jdk")
  }
}

//
// Allow defining external tool locations, use build options so that these options are not hidden.
//
buildOptions.addOption("lucene.tool.python3", "External python3 executable (path or name)", "python3")
buildOptions.addOption("lucene.tool.perl", "External perl executable (path or name)", "perl")
buildOptions.addOption("lucene.tool.git", "External git executable (path or name)", "git")

ext.externalTool = {String name ->
  if (name in [
        "python3",
        "perl",
        "git"
      ]) {
    return buildOptions.getOption("lucene.tool." + name).asStringProvider().get()
  }
  throw new GradleException("External tool named '${name}' is not defined.")
}
