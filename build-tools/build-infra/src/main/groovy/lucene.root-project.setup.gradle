/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.carrotsearch.gradle.buildinfra.buildoptions.BuildOptionValueSource
import com.carrotsearch.gradle.buildinfra.buildoptions.BuildOptionsPlugin
import com.carrotsearch.gradle.buildinfra.environment.GitInfoPlugin
import com.carrotsearch.randomizedtesting.SeedUtils

// Prepare the root project and some global infrastructure.

if (project != project.rootProject) {
  throw new GradleException("Applicable to rootProject only: " + project.path)
}

//
// Register these plugins early.
//
plugins.apply(GitInfoPlugin)
allprojects {
  plugins.apply(BuildOptionsPlugin)
}

//
// Figure out project version based on the base version and, suffix (or overrides of these options).
//
Provider<String> versionBase = buildOptions.addOption("version.base", "Base Lucene version")
Provider<String> versionSuffix = buildOptions.addOption("version.suffix", "Appends project version suffix to 'version.base'.", "SNAPSHOT")
Provider<String> versionProvider = buildOptions.addOption("version.release", "Lucene project version.",
    versionSuffix
    .map { suffix ->
      versionBase.get() + "-" + suffix
    }
    .orElse(versionBase))

String luceneVersion = versionProvider.get()
rootProject.version = luceneVersion

//
// Expose parts of the final project version to the build. We can't use Runtime.Version, sadly.
//
ext {
  // "base" version is stripped of the qualifier. Compute it because somebody might have passed
  // -Pversion.release=x.y.z directly.
  baseVersion = {
    def m = (luceneVersion =~ /^(\d+\.\d+\.\d+)(-(.+))?/)
    if (!m) {
      throw new GradleException("Can't strip version to just x.y.z: " + rootProject.version)
    }
    return m[0][1]
  }()
  // "majorVersion" is an integer with just the major version. Compute it.
  majorVersion = {
    def m = (version =~ /^(\d+)\.\d+\.\d+(-(.+))?/)
    if (!m) {
      throw new GradleException("Can't strip version to just major version: " + rootProject.version)
    }
    return m[0][1] as int
  }()

  // snapshot build marker used in scripts.
  snapshotBuild = luceneVersion.contains("SNAPSHOT")

  // detect if we run in CI environment by looking at existence of env vars:
  // "CI": Github (https://docs.github.com/en/actions/learn-github-actions/environment-variables)
  // anything starting with "JENKINS_" or "HUDSON_": Jenkins/Hudson (https://jenkins.thetaphi.de/env-vars.html/)
  isCIBuild = System.getenv().keySet().find { it ==~ /(?i)((JENKINS|HUDSON)(_\w+)?|CI)/ } != null
}

//
// Set certain root project properties eagerly so that plugins
// and scripts have them available.
//
ext {
  isIdea = Boolean.parseBoolean(System.getProperty("idea.active", "false"))
  isIdeaSync = Boolean.parseBoolean(System.getProperty("idea.sync.active", "false"))
  isIdeaBuild = (isIdea && !isIdeaSync)
}

ext {
  // JDK versions where the vector module is still incubating;
  // also change this in extractor tool: ExtractForeignAPI
  vectorIncubatorJavaVersions = [
    JavaVersion.VERSION_21,
    JavaVersion.VERSION_22,
    JavaVersion.VERSION_23,
    JavaVersion.VERSION_24
  ] as Set
}

// Pick the "root" seed from which everything else that is randomized is derived.
Provider<String> rootSeedOption = buildOptions.addOption("tests.seed", "The \"root\" randomization seed for options and test parameters.", provider {
  return String.format("%08X", new Random().nextLong())
})
ext {
  rootSeed = rootSeedOption.get()
  rootSeedUserProvided = buildOptions.getOption("tests.seed").getValue().get().source() == BuildOptionValueSource.COMPUTED_VALUE
  rootSeedLong = SeedUtils.parseSeedChain(rootSeed)[0]
}
allprojects {
  ext {
    projectSeedLong = rootProject.rootSeedLong ^ project.path.hashCode()
  }
}

tasks.register("showTestsSeed", {
  doFirst {
    logger.lifecycle("Running tests with root randomization seed: tests.seed=${rootProject.ext.rootSeed}")
  }
})

// TODO: this shouldn't be here but it's used in multiple scripts that are racy in lazy-evaluation.
configure(project(":lucene:core")) {
  ext {
    mrjarJavaVersions = [24]
    apijars = layout.projectDirectory.dir("src/generated/jdk")
  }
}
