/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.lucene.gradle.plugins.licenses;

import org.apache.lucene.gradle.plugins.LuceneGradlePlugin;
import org.gradle.api.Project;

/** This configures ASL and other license checks. */
public class CheckLicensesPlugin extends LuceneGradlePlugin {
  @Override
  public void apply(Project project) {
    applicableToRootProjectOnly(project);

    // Add check licenses task to the top-level project, configure it to scan all files, including
    // those from subprojects. It's fast and simple.
    var checkLicensesTask =
        project
            .getTasks()
            .register("checkLicenses", CheckLicensesTask.class, this::configureCheckLicenses);

    // Link any 'check' task from any subproject to this top-level task.
    project.subprojects(
        subproject -> {
          subproject
              .getTasks()
              .named("check")
              .configure(
                  checkTask -> {
                    checkTask.dependsOn(checkLicensesTask);
                  });
        });
  }

  private void configureCheckLicenses(CheckLicensesTask task) {
    Project project = task.getProject();

    task.getReportFile().set(project.getLayout().getBuildDirectory().file("licenses-report.txt"));
    task.getFiles()
        .from(
            project.fileTree(
                ".",
                tree -> {
                  // Exclude build outputs, ide files, .git.
                  tree.exclude(".git");
                  tree.exclude(".idea");
                  tree.exclude(".muse");
                  tree.exclude("**/build/**");
                  tree.exclude("**/.gradle");

                  // Exclude generated stuff.
                  tree.exclude("**/src/generated/**");

                  // Exclude github stuff (templates, workflows).
                  tree.exclude(".github");

                  // do not let RAT attempt to scan a python venv, it gets lost and confused...
                  tree.exclude("**/.venv/**");

                  // apache rat has a 'binary guesser'... I don't think this needs to be done at all
                  // -
                  // just exclude binaries here.
                  tree.exclude("**/*.dat");
                  tree.exclude("**/*.brk");
                  tree.exclude("**/*.gz");
                  tree.exclude("**/*.bin");
                  tree.exclude("**/*.bz2");
                  tree.exclude("**/*.gif");
                  tree.exclude("**/*.svg");
                  tree.exclude("lucene/analysis/smartcn/src/**/*.mem");

                  // Only check these selected file patterns as folks have various .gitignore-d
                  // resources generated by IDEs, etc.
                  tree.include("**/*.gradle");
                  tree.include("**/*.xml");
                  tree.include("**/*.md");
                  tree.include("**/*.py");
                  tree.include("**/*.sh");
                  tree.include("**/*.bat");

                  // Include selected patterns from any source folders.
                  tree.include("**/src/**");
                  tree.exclude("**/src/**/*.png");
                  tree.exclude("**/src/**/*.txt");
                  tree.exclude("**/src/**/*.zip");
                  tree.exclude("**/src/**/*.properties");
                  tree.exclude("**/src/**/*.utf8");

                  // project-specific exclusions.
                  tree.exclude("build-tools/build-infra-shadow/src/java/keep.me");
                  tree.exclude("lucene/analysis/icu/src/**/utr30.nrm");
                  tree.exclude("lucene/analysis/kuromoji/src/**/bocchan.utf-8");
                  tree.exclude("lucene/analysis/morfologik/src/**/*.info");
                  tree.exclude("lucene/analysis/morfologik/src/**/*.input");
                  tree.exclude("lucene/analysis/morfologik/src/**/*.dict");
                  tree.exclude("lucene/analysis/stempel/src/**/*.tbl");
                  tree.exclude("lucene/analysis/opennlp/src/**/en-test-lemmas.dict");
                  tree.exclude("lucene/demo/src/**/knn-token-vectors");
                  tree.exclude("lucene/test-framework/src/**/europarl.lines.txt.seek");
                  tree.exclude("lucene/analysis/common/src/**/*.aff");
                  tree.exclude("lucene/analysis/common/src/**/*.dic");
                  tree.exclude("lucene/analysis/common/src/**/*.good");
                  tree.exclude("lucene/analysis/common/src/**/*.sug");
                  tree.exclude("lucene/analysis/common/src/**/*.wrong");
                  tree.exclude("lucene/analysis/common/src/**/*.rslp");
                  tree.exclude("lucene/analysis/common/src/**/*.htm*");
                  tree.exclude("lucene/analysis.tests/src/**/*.aff");
                  tree.exclude("lucene/analysis.tests/src/**/*.dic");
                  // Luke has an embedded ElegantIcons font (MIT licensed).
                  tree.exclude("lucene/luke/src/**/ElegantIcons.ttf");
                }));
  }
}
